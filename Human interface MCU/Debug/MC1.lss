
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00003a0e  00003aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080011a  0080011a  00003b5c  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  00003b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012da  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000838e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000084ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000863e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a287  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b172  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cadb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 19 	call	0x33ec	; 0x33ec <main>
      8a:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <KEYPAD_getPressedKey+0x6>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    11ce:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    11d0:	1b 82       	std	Y+3, r1	; 0x03
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	98 2f       	mov	r25, r24
    11e0:	9c 5f       	subi	r25, 0xFC	; 252
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	69 2f       	mov	r22, r25
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 01       	movw	r18, r24
    11f4:	2c 5f       	subi	r18, 0xFC	; 252
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <KEYPAD_getPressedKey+0x40>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <KEYPAD_getPressedKey+0x3c>
    1206:	80 95       	com	r24
    1208:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	69 81       	ldd	r22, Y+1	; 0x01
    120e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1212:	1a 82       	std	Y+2, r1	; 0x02
    1214:	1c c0       	rjmp	.+56     	; 0x124e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	6a 81       	ldd	r22, Y+2	; 0x02
    121a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    121e:	88 23       	and	r24, r24
    1220:	99 f4       	brne	.+38     	; 0x1248 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	98 2f       	mov	r25, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	89 0f       	add	r24, r25
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	0e 94 32 09 	call	0x1264	; 0x1264 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f3       	brcs	.-62     	; 0x1216 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	08 f4       	brcc	.+2      	; 0x1262 <KEYPAD_getPressedKey+0xa0>
    1260:	b9 cf       	rjmp	.-142    	; 0x11d4 <KEYPAD_getPressedKey+0x12>
    1262:	b6 cf       	rjmp	.-148    	; 0x11d0 <KEYPAD_getPressedKey+0xe>

00001264 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <KEYPAD_4x4_adjustKeyNumber+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <KEYPAD_4x4_adjustKeyNumber+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1272:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1288:	70 c0       	rjmp	.+224    	; 0x136a <KEYPAD_4x4_adjustKeyNumber+0x106>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	29 30       	cpi	r18, 0x09	; 9
    1290:	31 05       	cpc	r19, r1
    1292:	5c f5       	brge	.+86     	; 0x12ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    129e:	59 c0       	rjmp	.+178    	; 0x1352 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	25 30       	cpi	r18, 0x05	; 5
    12a6:	31 05       	cpc	r19, r1
    12a8:	9c f4       	brge	.+38     	; 0x12d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    12b4:	48 c0       	rjmp	.+144    	; 0x1346 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	23 30       	cpi	r18, 0x03	; 3
    12bc:	31 05       	cpc	r19, r1
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12c0:	45 c0       	rjmp	.+138    	; 0x134c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12cc:	39 c0       	rjmp	.+114    	; 0x1340 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	26 30       	cpi	r18, 0x06	; 6
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	87 30       	cpi	r24, 0x07	; 7
    12e2:	91 05       	cpc	r25, r1
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    12e6:	3e c0       	rjmp	.+124    	; 0x1364 <KEYPAD_4x4_adjustKeyNumber+0x100>
    12e8:	37 c0       	rjmp	.+110    	; 0x1358 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	2c 30       	cpi	r18, 0x0C	; 12
    12f0:	31 05       	cpc	r19, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    12f4:	46 c0       	rjmp	.+140    	; 0x1382 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	8d 30       	cpi	r24, 0x0D	; 13
    12fc:	91 05       	cpc	r25, r1
    12fe:	5c f4       	brge	.+22     	; 0x1316 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	2a 30       	cpi	r18, 0x0A	; 10
    1306:	31 05       	cpc	r19, r1
    1308:	b1 f1       	breq	.+108    	; 0x1376 <KEYPAD_4x4_adjustKeyNumber+0x112>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	8b 30       	cpi	r24, 0x0B	; 11
    1310:	91 05       	cpc	r25, r1
    1312:	a4 f5       	brge	.+104    	; 0x137c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1314:	2d c0       	rjmp	.+90     	; 0x1370 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	2e 30       	cpi	r18, 0x0E	; 14
    131c:	31 05       	cpc	r19, r1
    131e:	b9 f1       	breq	.+110    	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	8e 30       	cpi	r24, 0x0E	; 14
    1326:	91 05       	cpc	r25, r1
    1328:	7c f1       	brlt	.+94     	; 0x1388 <KEYPAD_4x4_adjustKeyNumber+0x124>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	2f 30       	cpi	r18, 0x0F	; 15
    1330:	31 05       	cpc	r19, r1
    1332:	79 f1       	breq	.+94     	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	80 31       	cpi	r24, 0x10	; 16
    133a:	91 05       	cpc	r25, r1
    133c:	69 f1       	breq	.+90     	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0x134>
    133e:	2f c0       	rjmp	.+94     	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1340:	87 e0       	ldi	r24, 0x07	; 7
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	2e c0       	rjmp	.+92     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	2b c0       	rjmp	.+86     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1352:	85 e2       	ldi	r24, 0x25	; 37
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	25 c0       	rjmp	.+74     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	22 c0       	rjmp	.+68     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    135e:	85 e0       	ldi	r24, 0x05	; 5
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1364:	86 e0       	ldi	r24, 0x06	; 6
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	1c c0       	rjmp	.+56     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    136a:	8a e2       	ldi	r24, 0x2A	; 42
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	10 c0       	rjmp	.+32     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1382:	8d e2       	ldi	r24, 0x2D	; 45
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1388:	8d e0       	ldi	r24, 0x0D	; 13
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1392:	8d e3       	ldi	r24, 0x3D	; 61
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1398:	8b e2       	ldi	r24, 0x2B	; 43
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * Setup the LCD pins directions by use the GPIO driver.
 */
void LCD_init( void )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction data port as output port */
	GPIO_setupPortDirection(LCD_PORT_ID,PORT_OUTPUT);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	6f ef       	ldi	r22, 0xFF	; 255
    13be:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	65 e0       	ldi	r22, 0x05	; 5
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	LCD_sendCommand(0x38); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    13e0:	88 e3       	ldi	r24, 0x38	; 56
    13e2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LCD_sendCommand>
	LCD_sendCommand(0x0c); /* cursor off */
    13e6:	8c e0       	ldi	r24, 0x0C	; 12
    13e8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LCD_sendCommand>
	LCD_sendCommand(0x01); /* clear LCD at the beginning */
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LCD_sendCommand>
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand( uint8 command )
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	e9 97       	sbiw	r28, 0x39	; 57
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	89 af       	std	Y+57, r24	; 0x39
		GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	63 e0       	ldi	r22, 0x03	; 3
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	64 e0       	ldi	r22, 0x04	; 4
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e8       	ldi	r26, 0x80	; 128
    1428:	bf e3       	ldi	r27, 0x3F	; 63
    142a:	8d ab       	std	Y+53, r24	; 0x35
    142c:	9e ab       	std	Y+54, r25	; 0x36
    142e:	af ab       	std	Y+55, r26	; 0x37
    1430:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6d a9       	ldd	r22, Y+53	; 0x35
    1434:	7e a9       	ldd	r23, Y+54	; 0x36
    1436:	8f a9       	ldd	r24, Y+55	; 0x37
    1438:	98 ad       	ldd	r25, Y+56	; 0x38
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	89 ab       	std	Y+49, r24	; 0x31
    144c:	9a ab       	std	Y+50, r25	; 0x32
    144e:	ab ab       	std	Y+51, r26	; 0x33
    1450:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1452:	69 a9       	ldd	r22, Y+49	; 0x31
    1454:	7a a9       	ldd	r23, Y+50	; 0x32
    1456:	8b a9       	ldd	r24, Y+51	; 0x33
    1458:	9c a9       	ldd	r25, Y+52	; 0x34
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <LCD_sendCommand+0x7c>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	98 ab       	std	Y+48, r25	; 0x30
    1470:	8f a7       	std	Y+47, r24	; 0x2f
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1474:	69 a9       	ldd	r22, Y+49	; 0x31
    1476:	7a a9       	ldd	r23, Y+50	; 0x32
    1478:	8b a9       	ldd	r24, Y+51	; 0x33
    147a:	9c a9       	ldd	r25, Y+52	; 0x34
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6d a9       	ldd	r22, Y+53	; 0x35
    148e:	7e a9       	ldd	r23, Y+54	; 0x36
    1490:	8f a9       	ldd	r24, Y+55	; 0x37
    1492:	98 ad       	ldd	r25, Y+56	; 0x38
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	98 ab       	std	Y+48, r25	; 0x30
    14b2:	8f a7       	std	Y+47, r24	; 0x2f
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <LCD_sendCommand+0xdc>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9e a7       	std	Y+46, r25	; 0x2e
    14bc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14be:	8d a5       	ldd	r24, Y+45	; 0x2d
    14c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <LCD_sendCommand+0xca>
    14c6:	9e a7       	std	Y+46, r25	; 0x2e
    14c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    14cc:	98 a9       	ldd	r25, Y+48	; 0x30
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	98 ab       	std	Y+48, r25	; 0x30
    14d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d6:	98 a9       	ldd	r25, Y+48	; 0x30
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <LCD_sendCommand+0xbe>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	69 a9       	ldd	r22, Y+49	; 0x31
    14e0:	7a a9       	ldd	r23, Y+50	; 0x32
    14e2:	8b a9       	ldd	r24, Y+51	; 0x33
    14e4:	9c a9       	ldd	r25, Y+52	; 0x34
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f4:	98 a9       	ldd	r25, Y+48	; 0x30
    14f6:	9c a7       	std	Y+44, r25	; 0x2c
    14f8:	8b a7       	std	Y+43, r24	; 0x2b
    14fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_sendCommand+0x106>
    1502:	9c a7       	std	Y+44, r25	; 0x2c
    1504:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);/* Enable LCD E=1 */
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	65 e0       	ldi	r22, 0x05	; 5
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e8       	ldi	r26, 0x80	; 128
    1516:	bf e3       	ldi	r27, 0x3F	; 63
    1518:	8f a3       	std	Y+39, r24	; 0x27
    151a:	98 a7       	std	Y+40, r25	; 0x28
    151c:	a9 a7       	std	Y+41, r26	; 0x29
    151e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6f a1       	ldd	r22, Y+39	; 0x27
    1522:	78 a5       	ldd	r23, Y+40	; 0x28
    1524:	89 a5       	ldd	r24, Y+41	; 0x29
    1526:	9a a5       	ldd	r25, Y+42	; 0x2a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8b a3       	std	Y+35, r24	; 0x23
    153a:	9c a3       	std	Y+36, r25	; 0x24
    153c:	ad a3       	std	Y+37, r26	; 0x25
    153e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1540:	6b a1       	ldd	r22, Y+35	; 0x23
    1542:	7c a1       	ldd	r23, Y+36	; 0x24
    1544:	8d a1       	ldd	r24, Y+37	; 0x25
    1546:	9e a1       	ldd	r25, Y+38	; 0x26
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9a a3       	std	Y+34, r25	; 0x22
    155e:	89 a3       	std	Y+33, r24	; 0x21
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1562:	6b a1       	ldd	r22, Y+35	; 0x23
    1564:	7c a1       	ldd	r23, Y+36	; 0x24
    1566:	8d a1       	ldd	r24, Y+37	; 0x25
    1568:	9e a1       	ldd	r25, Y+38	; 0x26
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6f a1       	ldd	r22, Y+39	; 0x27
    157c:	78 a5       	ldd	r23, Y+40	; 0x28
    157e:	89 a5       	ldd	r24, Y+41	; 0x29
    1580:	9a a5       	ldd	r25, Y+42	; 0x2a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9a a3       	std	Y+34, r25	; 0x22
    15a0:	89 a3       	std	Y+33, r24	; 0x21
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <LCD_sendCommand+0x1ca>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	98 a3       	std	Y+32, r25	; 0x20
    15aa:	8f 8f       	std	Y+31, r24	; 0x1f
    15ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ae:	98 a1       	ldd	r25, Y+32	; 0x20
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_sendCommand+0x1b8>
    15b4:	98 a3       	std	Y+32, r25	; 0x20
    15b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9a a3       	std	Y+34, r25	; 0x22
    15c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	89 a1       	ldd	r24, Y+33	; 0x21
    15c4:	9a a1       	ldd	r25, Y+34	; 0x22
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <LCD_sendCommand+0x1ac>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6b a1       	ldd	r22, Y+35	; 0x23
    15ce:	7c a1       	ldd	r23, Y+36	; 0x24
    15d0:	8d a1       	ldd	r24, Y+37	; 0x25
    15d2:	9e a1       	ldd	r25, Y+38	; 0x26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9a a3       	std	Y+34, r25	; 0x22
    15de:	89 a3       	std	Y+33, r24	; 0x21
    15e0:	89 a1       	ldd	r24, Y+33	; 0x21
    15e2:	9a a1       	ldd	r25, Y+34	; 0x22
    15e4:	9e 8f       	std	Y+30, r25	; 0x1e
    15e6:	8d 8f       	std	Y+29, r24	; 0x1d
    15e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <LCD_sendCommand+0x1f4>
    15f0:	9e 8f       	std	Y+30, r25	; 0x1e
    15f2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);/* delay for processing Tpw - Tdws = 190ns */
		GPIO_writePort(LCD_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	69 ad       	ldd	r22, Y+57	; 0x39
    15f8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e8       	ldi	r26, 0x80	; 128
    1602:	bf e3       	ldi	r27, 0x3F	; 63
    1604:	89 8f       	std	Y+25, r24	; 0x19
    1606:	9a 8f       	std	Y+26, r25	; 0x1a
    1608:	ab 8f       	std	Y+27, r26	; 0x1b
    160a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	69 8d       	ldd	r22, Y+25	; 0x19
    160e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a ef       	ldi	r20, 0xFA	; 250
    161a:	54 e4       	ldi	r21, 0x44	; 68
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8d 8b       	std	Y+21, r24	; 0x15
    1626:	9e 8b       	std	Y+22, r25	; 0x16
    1628:	af 8b       	std	Y+23, r26	; 0x17
    162a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    162c:	6d 89       	ldd	r22, Y+21	; 0x15
    162e:	7e 89       	ldd	r23, Y+22	; 0x16
    1630:	8f 89       	ldd	r24, Y+23	; 0x17
    1632:	98 8d       	ldd	r25, Y+24	; 0x18
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1640:	88 23       	and	r24, r24
    1642:	2c f4       	brge	.+10     	; 0x164e <LCD_sendCommand+0x256>
		__ticks = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c 8b       	std	Y+20, r25	; 0x14
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	3f c0       	rjmp	.+126    	; 0x16cc <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    164e:	6d 89       	ldd	r22, Y+21	; 0x15
    1650:	7e 89       	ldd	r23, Y+22	; 0x16
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	4c f5       	brge	.+82     	; 0x16b8 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1666:	69 8d       	ldd	r22, Y+25	; 0x19
    1668:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9c 8b       	std	Y+20, r25	; 0x14
    168c:	8b 8b       	std	Y+19, r24	; 0x13
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <LCD_sendCommand+0x2b6>
    1690:	88 ec       	ldi	r24, 0xC8	; 200
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9a 8b       	std	Y+18, r25	; 0x12
    1696:	89 8b       	std	Y+17, r24	; 0x11
    1698:	89 89       	ldd	r24, Y+17	; 0x11
    169a:	9a 89       	ldd	r25, Y+18	; 0x12
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_sendCommand+0x2a4>
    16a0:	9a 8b       	std	Y+18, r25	; 0x12
    16a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	8b 89       	ldd	r24, Y+19	; 0x13
    16a6:	9c 89       	ldd	r25, Y+20	; 0x14
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9c 8b       	std	Y+20, r25	; 0x14
    16ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	8b 89       	ldd	r24, Y+19	; 0x13
    16b0:	9c 89       	ldd	r25, Y+20	; 0x14
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	69 f7       	brne	.-38     	; 0x1690 <LCD_sendCommand+0x298>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ba:	7e 89       	ldd	r23, Y+22	; 0x16
    16bc:	8f 89       	ldd	r24, Y+23	; 0x17
    16be:	98 8d       	ldd	r25, Y+24	; 0x18
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	9c 89       	ldd	r25, Y+20	; 0x14
    16d0:	98 8b       	std	Y+16, r25	; 0x10
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
    16d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d6:	98 89       	ldd	r25, Y+16	; 0x10
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0x2e0>
    16dc:	98 8b       	std	Y+16, r25	; 0x10
    16de:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW);/* Disable LCD E=0 */
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	65 e0       	ldi	r22, 0x05	; 5
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a0 e8       	ldi	r26, 0x80	; 128
    16f0:	bf e3       	ldi	r27, 0x3F	; 63
    16f2:	8b 87       	std	Y+11, r24	; 0x0b
    16f4:	9c 87       	std	Y+12, r25	; 0x0c
    16f6:	ad 87       	std	Y+13, r26	; 0x0d
    16f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	8f 83       	std	Y+7, r24	; 0x07
    1714:	98 87       	std	Y+8, r25	; 0x08
    1716:	a9 87       	std	Y+9, r26	; 0x09
    1718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    171a:	6f 81       	ldd	r22, Y+7	; 0x07
    171c:	78 85       	ldd	r23, Y+8	; 0x08
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	9a 85       	ldd	r25, Y+10	; 0x0a
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	2c f4       	brge	.+10     	; 0x173c <LCD_sendCommand+0x344>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	57 e4       	ldi	r21, 0x47	; 71
    174c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1750:	18 16       	cp	r1, r24
    1752:	4c f5       	brge	.+82     	; 0x17a6 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1754:	6b 85       	ldd	r22, Y+11	; 0x0b
    1756:	7c 85       	ldd	r23, Y+12	; 0x0c
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	0f c0       	rjmp	.+30     	; 0x179c <LCD_sendCommand+0x3a4>
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_sendCommand+0x392>
    178e:	9c 83       	std	Y+4, r25	; 0x04
    1790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	69 f7       	brne	.-38     	; 0x177e <LCD_sendCommand+0x386>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <LCD_sendCommand+0x3ce>
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);/* delay for processing Th = 13ns */
}
    17ce:	e9 96       	adiw	r28, 0x39	; 57
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter( uint8 data)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	e9 97       	sbiw	r28, 0x39	; 57
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	89 af       	std	Y+57, r24	; 0x39
	 	    GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Instruction Mode RS=1 */
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	63 e0       	ldi	r22, 0x03	; 3
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	 	 	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);  /* write data to LCD so RW=0 */
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	64 e0       	ldi	r22, 0x04	; 4
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 e8       	ldi	r26, 0x80	; 128
    1810:	bf e3       	ldi	r27, 0x3F	; 63
    1812:	8d ab       	std	Y+53, r24	; 0x35
    1814:	9e ab       	std	Y+54, r25	; 0x36
    1816:	af ab       	std	Y+55, r26	; 0x37
    1818:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	7e a9       	ldd	r23, Y+54	; 0x36
    181e:	8f a9       	ldd	r24, Y+55	; 0x37
    1820:	98 ad       	ldd	r25, Y+56	; 0x38
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a ef       	ldi	r20, 0xFA	; 250
    1828:	54 e4       	ldi	r21, 0x44	; 68
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	89 ab       	std	Y+49, r24	; 0x31
    1834:	9a ab       	std	Y+50, r25	; 0x32
    1836:	ab ab       	std	Y+51, r26	; 0x33
    1838:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    183a:	69 a9       	ldd	r22, Y+49	; 0x31
    183c:	7a a9       	ldd	r23, Y+50	; 0x32
    183e:	8b a9       	ldd	r24, Y+51	; 0x33
    1840:	9c a9       	ldd	r25, Y+52	; 0x34
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	98 ab       	std	Y+48, r25	; 0x30
    1858:	8f a7       	std	Y+47, r24	; 0x2f
    185a:	3f c0       	rjmp	.+126    	; 0x18da <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    185c:	69 a9       	ldd	r22, Y+49	; 0x31
    185e:	7a a9       	ldd	r23, Y+50	; 0x32
    1860:	8b a9       	ldd	r24, Y+51	; 0x33
    1862:	9c a9       	ldd	r25, Y+52	; 0x34
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	6d a9       	ldd	r22, Y+53	; 0x35
    1876:	7e a9       	ldd	r23, Y+54	; 0x36
    1878:	8f a9       	ldd	r24, Y+55	; 0x37
    187a:	98 ad       	ldd	r25, Y+56	; 0x38
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <LCD_displayCharacter+0xdc>
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9e a7       	std	Y+46, r25	; 0x2e
    18a4:	8d a7       	std	Y+45, r24	; 0x2d
    18a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_displayCharacter+0xca>
    18ae:	9e a7       	std	Y+46, r25	; 0x2e
    18b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b4:	98 a9       	ldd	r25, Y+48	; 0x30
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	98 ab       	std	Y+48, r25	; 0x30
    18ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    18be:	98 a9       	ldd	r25, Y+48	; 0x30
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <LCD_displayCharacter+0xbe>
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	69 a9       	ldd	r22, Y+49	; 0x31
    18c8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ca:	8b a9       	ldd	r24, Y+51	; 0x33
    18cc:	9c a9       	ldd	r25, Y+52	; 0x34
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	98 ab       	std	Y+48, r25	; 0x30
    18d8:	8f a7       	std	Y+47, r24	; 0x2f
    18da:	8f a5       	ldd	r24, Y+47	; 0x2f
    18dc:	98 a9       	ldd	r25, Y+48	; 0x30
    18de:	9c a7       	std	Y+44, r25	; 0x2c
    18e0:	8b a7       	std	Y+43, r24	; 0x2b
    18e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_displayCharacter+0x106>
    18ea:	9c a7       	std	Y+44, r25	; 0x2c
    18ec:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1); /* delay for processing Tas = 50ns */
			GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);/* Enable LCD E=1 */
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	65 e0       	ldi	r22, 0x05	; 5
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e8       	ldi	r26, 0x80	; 128
    18fe:	bf e3       	ldi	r27, 0x3F	; 63
    1900:	8f a3       	std	Y+39, r24	; 0x27
    1902:	98 a7       	std	Y+40, r25	; 0x28
    1904:	a9 a7       	std	Y+41, r26	; 0x29
    1906:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6f a1       	ldd	r22, Y+39	; 0x27
    190a:	78 a5       	ldd	r23, Y+40	; 0x28
    190c:	89 a5       	ldd	r24, Y+41	; 0x29
    190e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8b a3       	std	Y+35, r24	; 0x23
    1922:	9c a3       	std	Y+36, r25	; 0x24
    1924:	ad a3       	std	Y+37, r26	; 0x25
    1926:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1928:	6b a1       	ldd	r22, Y+35	; 0x23
    192a:	7c a1       	ldd	r23, Y+36	; 0x24
    192c:	8d a1       	ldd	r24, Y+37	; 0x25
    192e:	9e a1       	ldd	r25, Y+38	; 0x26
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9a a3       	std	Y+34, r25	; 0x22
    1946:	89 a3       	std	Y+33, r24	; 0x21
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    194a:	6b a1       	ldd	r22, Y+35	; 0x23
    194c:	7c a1       	ldd	r23, Y+36	; 0x24
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6f a1       	ldd	r22, Y+39	; 0x27
    1964:	78 a5       	ldd	r23, Y+40	; 0x28
    1966:	89 a5       	ldd	r24, Y+41	; 0x29
    1968:	9a a5       	ldd	r25, Y+42	; 0x2a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_displayCharacter+0x1ca>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	98 a3       	std	Y+32, r25	; 0x20
    1992:	8f 8f       	std	Y+31, r24	; 0x1f
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_displayCharacter+0x1b8>
    199c:	98 a3       	std	Y+32, r25	; 0x20
    199e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	89 a1       	ldd	r24, Y+33	; 0x21
    19a2:	9a a1       	ldd	r25, Y+34	; 0x22
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9a a3       	std	Y+34, r25	; 0x22
    19a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_displayCharacter+0x1ac>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ca:	9a a1       	ldd	r25, Y+34	; 0x22
    19cc:	9e 8f       	std	Y+30, r25	; 0x1e
    19ce:	8d 8f       	std	Y+29, r24	; 0x1d
    19d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_displayCharacter+0x1f4>
    19d8:	9e 8f       	std	Y+30, r25	; 0x1e
    19da:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);/* delay for processing Tpw - Tdws = 190ns */
			GPIO_writePort(LCD_PORT_ID,data);/* out the required data to the data bus D0 --> D7 */
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	69 ad       	ldd	r22, Y+57	; 0x39
    19e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e8       	ldi	r26, 0x80	; 128
    19ea:	bf e3       	ldi	r27, 0x3F	; 63
    19ec:	89 8f       	std	Y+25, r24	; 0x19
    19ee:	9a 8f       	std	Y+26, r25	; 0x1a
    19f0:	ab 8f       	std	Y+27, r26	; 0x1b
    19f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	69 8d       	ldd	r22, Y+25	; 0x19
    19f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8d 8b       	std	Y+21, r24	; 0x15
    1a0e:	9e 8b       	std	Y+22, r25	; 0x16
    1a10:	af 8b       	std	Y+23, r26	; 0x17
    1a12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a14:	6d 89       	ldd	r22, Y+21	; 0x15
    1a16:	7e 89       	ldd	r23, Y+22	; 0x16
    1a18:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1a36:	6d 89       	ldd	r22, Y+21	; 0x15
    1a38:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9c 8b       	std	Y+20, r25	; 0x14
    1a74:	8b 8b       	std	Y+19, r24	; 0x13
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <LCD_displayCharacter+0x2b6>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9a 8b       	std	Y+18, r25	; 0x12
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
    1a80:	89 89       	ldd	r24, Y+17	; 0x11
    1a82:	9a 89       	ldd	r25, Y+18	; 0x12
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_displayCharacter+0x2a4>
    1a88:	9a 8b       	std	Y+18, r25	; 0x12
    1a8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9c 8b       	std	Y+20, r25	; 0x14
    1a94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8b 89       	ldd	r24, Y+19	; 0x13
    1a98:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <LCD_displayCharacter+0x298>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
    1ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab8:	98 8b       	std	Y+16, r25	; 0x10
    1aba:	8f 87       	std	Y+15, r24	; 0x0f
    1abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abe:	98 89       	ldd	r25, Y+16	; 0x10
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_displayCharacter+0x2e0>
    1ac4:	98 8b       	std	Y+16, r25	; 0x10
    1ac6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);/* delay for processing Tdsw = 100ns */
			GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW);/* Disable LCD E=0 */
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	65 e0       	ldi	r22, 0x05	; 5
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e8       	ldi	r26, 0x80	; 128
    1ad8:	bf e3       	ldi	r27, 0x3F	; 63
    1ada:	8b 87       	std	Y+11, r24	; 0x0b
    1adc:	9c 87       	std	Y+12, r25	; 0x0c
    1ade:	ad 87       	std	Y+13, r26	; 0x0d
    1ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a ef       	ldi	r20, 0xFA	; 250
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8f 83       	std	Y+7, r24	; 0x07
    1afc:	98 87       	std	Y+8, r25	; 0x08
    1afe:	a9 87       	std	Y+9, r26	; 0x09
    1b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <LCD_displayCharacter+0x3a4>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_displayCharacter+0x392>
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <LCD_displayCharacter+0x386>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b90:	78 85       	ldd	r23, Y+8	; 0x08
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD_displayCharacter+0x3ce>
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);/* delay for processing Th = 13ns */
}
    1bb6:	e9 96       	adiw	r28, 0x39	; 57
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString( const uint8 *str )
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <LCD_displayString+0x6>
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	9b 83       	std	Y+3, r25	; 0x03
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	for(count = 0; str[count]!='\0'; count++)
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <LCD_displayString+0x30>
	{
		LCD_displayCharacter( str[count] );
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 0f       	add	r30, r18
    1bea:	f3 1f       	adc	r31, r19
    1bec:	80 81       	ld	r24, Z
    1bee:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString( const uint8 *str )
{
	uint8 count;
	for(count = 0; str[count]!='\0'; count++)
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	fc 01       	movw	r30, r24
    1c04:	e2 0f       	add	r30, r18
    1c06:	f3 1f       	adc	r31, r19
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 23       	and	r24, r24
    1c0c:	39 f7       	brne	.-50     	; 0x1bdc <LCD_displayString+0x14>
	{
		LCD_displayCharacter( str[count] );
	}
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <LCD_moveCursor+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <LCD_moveCursor+0x8>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3d 83       	std	Y+5, r19	; 0x05
    1c34:	2c 83       	std	Y+4, r18	; 0x04
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	c1 f0       	breq	.+48     	; 0x1c70 <LCD_moveCursor+0x56>
    1c40:	2c 81       	ldd	r18, Y+4	; 0x04
    1c42:	3d 81       	ldd	r19, Y+5	; 0x05
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <LCD_moveCursor+0x3a>
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <LCD_moveCursor+0x50>
    1c52:	19 c0       	rjmp	.+50     	; 0x1c86 <LCD_moveCursor+0x6c>
    1c54:	2c 81       	ldd	r18, Y+4	; 0x04
    1c56:	3d 81       	ldd	r19, Y+5	; 0x05
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	69 f0       	breq	.+26     	; 0x1c78 <LCD_moveCursor+0x5e>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	91 05       	cpc	r25, r1
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <LCD_moveCursor+0x66>
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	0b c0       	rjmp	.+22     	; 0x1c86 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	80 5c       	subi	r24, 0xC0	; 192
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	07 c0       	rjmp	.+14     	; 0x1c86 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	80 5f       	subi	r24, 0xF0	; 240
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	80 5b       	subi	r24, 0xB0	; 176
    1c84:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | 0x80 );
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LCD_sendCommand>
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col, const uint8 *str)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <LCD_displayStringRowColumn+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <LCD_displayStringRowColumn+0x8>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	6a 83       	std	Y+2, r22	; 0x02
    1cae:	5c 83       	std	Y+4, r21	; 0x04
    1cb0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
	LCD_displayString(str);
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_clearScreen>:
/*
 * Description :
 * Clear LCD screen
 */
void LCD_clearScreen( void )
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LCD_sendCommand>
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	62 97       	sbiw	r28, 0x12	; 18
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	9a 8b       	std	Y+18, r25	; 0x12
    1cfa:	89 8b       	std	Y+17, r24	; 0x11
   uint8 buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1cfc:	89 89       	ldd	r24, Y+17	; 0x11
    1cfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1d00:	9e 01       	movw	r18, r28
    1d02:	2f 5f       	subi	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	b9 01       	movw	r22, r18
    1d08:	4a e0       	ldi	r20, 0x0A	; 10
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <itoa>
   LCD_displayString(buff); /* Display the string */
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
}
    1d18:	62 96       	adiw	r28, 0x12	; 18
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <WRONG_PASS>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void WRONG_PASS( void )
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	2b 97       	sbiw	r28, 0x0b	; 11
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
	/* Intialize Timer driver through structure configuration */
	TIMER0_configType config_1 ={normal, NORMAL_MODE,F_CPU_CLK_1024, NORMAL_ENABLE, 0 ,0};
    1d3e:	ce 01       	movw	r24, r28
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	98 87       	std	Y+8, r25	; 0x08
    1d44:	8f 83       	std	Y+7, r24	; 0x07
    1d46:	e6 e0       	ldi	r30, 0x06	; 6
    1d48:	f1 e0       	ldi	r31, 0x01	; 1
    1d4a:	fa 87       	std	Y+10, r31	; 0x0a
    1d4c:	e9 87       	std	Y+9, r30	; 0x09
    1d4e:	f6 e0       	ldi	r31, 0x06	; 6
    1d50:	fb 87       	std	Y+11, r31	; 0x0b
    1d52:	e9 85       	ldd	r30, Y+9	; 0x09
    1d54:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d56:	00 80       	ld	r0, Z
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	9a 87       	std	Y+10, r25	; 0x0a
    1d60:	89 87       	std	Y+9, r24	; 0x09
    1d62:	ef 81       	ldd	r30, Y+7	; 0x07
    1d64:	f8 85       	ldd	r31, Y+8	; 0x08
    1d66:	00 82       	st	Z, r0
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	98 85       	ldd	r25, Y+8	; 0x08
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	98 87       	std	Y+8, r25	; 0x08
    1d70:	8f 83       	std	Y+7, r24	; 0x07
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	91 50       	subi	r25, 0x01	; 1
    1d76:	9b 87       	std	Y+11, r25	; 0x0b
    1d78:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d7a:	ee 23       	and	r30, r30
    1d7c:	51 f7       	brne	.-44     	; 0x1d52 <WRONG_PASS+0x28>
	TIMER0_init( &config_1 );
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	0e 94 9a 1a 	call	0x3534	; 0x3534 <TIMER0_init>

	/* Wait untill recieve ERROR message from MC2 */
	while(UART_recieveByte() != ERROR_PASS );
    1d86:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    1d8a:	88 38       	cpi	r24, 0x88	; 136
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <WRONG_PASS+0x5c>
	LCD_clearScreen();
    1d8e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	g_ticks = 0;
    1d92:	10 92 26 01 	sts	0x0126, r1
    1d96:	10 92 25 01 	sts	0x0125, r1
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <WRONG_PASS+0x7a>

	/* Display ERROR message inside ISR OF timer 0 for 1 minute */
	while(g_ticks >= 0 && g_ticks <= 1831 )
	{
		TIMER0_setCallBack(DISPLAY_ERROR_MESSAGE);
    1d9c:	8b ee       	ldi	r24, 0xEB	; 235
    1d9e:	9e e0       	ldi	r25, 0x0E	; 14
    1da0:	0e 94 11 1b 	call	0x3622	; 0x3622 <TIMER0_setCallBack>
	while(UART_recieveByte() != ERROR_PASS );
	LCD_clearScreen();
	g_ticks = 0;

	/* Display ERROR message inside ISR OF timer 0 for 1 minute */
	while(g_ticks >= 0 && g_ticks <= 1831 )
    1da4:	80 91 25 01 	lds	r24, 0x0125
    1da8:	90 91 26 01 	lds	r25, 0x0126
    1dac:	f7 e0       	ldi	r31, 0x07	; 7
    1dae:	88 32       	cpi	r24, 0x28	; 40
    1db0:	9f 07       	cpc	r25, r31
    1db2:	a0 f3       	brcs	.-24     	; 0x1d9c <WRONG_PASS+0x72>
	{
		TIMER0_setCallBack(DISPLAY_ERROR_MESSAGE);
	}
	g_ticks = 0;
    1db4:	10 92 26 01 	sts	0x0126, r1
    1db8:	10 92 25 01 	sts	0x0125, r1
	LCD_clearScreen();
    1dbc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>

	/* Deintialize timer driver */
	TIMER0_DeInit();
    1dc0:	0e 94 23 1b 	call	0x3646	; 0x3646 <TIMER0_DeInit>
}
    1dc4:	2b 96       	adiw	r28, 0x0b	; 11
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <DISPLAY_ERROR_MESSAGE>:


void DISPLAY_ERROR_MESSAGE ( void )
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,0);
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
	g_ticks++;
    1de6:	80 91 25 01 	lds	r24, 0x0125
    1dea:	90 91 26 01 	lds	r25, 0x0126
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	90 93 26 01 	sts	0x0126, r25
    1df4:	80 93 25 01 	sts	0x0125, r24

	/* Display ERROR message through LCD */
	LCD_displayString("ERROR");
    1df8:	80 e6       	ldi	r24, 0x60	; 96
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <INCREMENT_TICKS>:
void INCREMENT_TICKS( void )
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	/* Increment g_ticks */
	g_ticks++;
    1e0e:	80 91 25 01 	lds	r24, 0x0125
    1e12:	90 91 26 01 	lds	r25, 0x0126
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	90 93 26 01 	sts	0x0126, r25
    1e1c:	80 93 25 01 	sts	0x0125, r24
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <CREATE_PASSWORD>:

void CREATE_PASSWORD( void )
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
	/* Call ENTERP PASSWORD Function to create 2 passwords */
	ENTER_PASSWORD();
    1e2e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <ENTER_PASSWORD>

	/* Send two passwords to MC2 */
	SEND_TO_MC2 (g_pass1 );
    1e32:	8a e1       	ldi	r24, 0x1A	; 26
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	0e 94 46 11 	call	0x228c	; 0x228c <SEND_TO_MC2>
	SEND_TO_MC2 ( g_pass2 );
    1e3a:	8f e1       	ldi	r24, 0x1F	; 31
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	0e 94 46 11 	call	0x228c	; 0x228c <SEND_TO_MC2>
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <ENTER_PASSWORD>:

void ENTER_PASSWORD( void )
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	eb 97       	sbiw	r28, 0x3b	; 59
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
	uint8 num = 0;
    1e5c:	1b ae       	std	Y+59, r1	; 0x3b
	LCD_displayString("Enter Password");
    1e5e:	86 e6       	ldi	r24, 0x66	; 102
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	LCD_moveCursor(1,0);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>

	/* Enter first password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    1e6e:	1a ae       	std	Y+58, r1	; 0x3a
    1e70:	f5 c0       	rjmp	.+490    	; 0x205c <ENTER_PASSWORD+0x214>
		{
			num = KEYPAD_getPressedKey();
    1e72:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    1e76:	8b af       	std	Y+59, r24	; 0x3b
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a8 e4       	ldi	r26, 0x48	; 72
    1e7e:	b3 e4       	ldi	r27, 0x43	; 67
    1e80:	8d ab       	std	Y+53, r24	; 0x35
    1e82:	9e ab       	std	Y+54, r25	; 0x36
    1e84:	af ab       	std	Y+55, r26	; 0x37
    1e86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 ab       	std	Y+49, r24	; 0x31
    1ea2:	9a ab       	std	Y+50, r25	; 0x32
    1ea4:	ab ab       	std	Y+51, r26	; 0x33
    1ea6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <ENTER_PASSWORD+0x82>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <ENTER_PASSWORD+0x100>
	else if (__tmp > 65535)
    1eca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ecc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ece:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <ENTER_PASSWORD+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <ENTER_PASSWORD+0xe2>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9e a7       	std	Y+46, r25	; 0x2e
    1f12:	8d a7       	std	Y+45, r24	; 0x2d
    1f14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <ENTER_PASSWORD+0xd0>
    1f1c:	9e a7       	std	Y+46, r25	; 0x2e
    1f1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f22:	98 a9       	ldd	r25, Y+48	; 0x30
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	98 ab       	std	Y+48, r25	; 0x30
    1f28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <ENTER_PASSWORD+0xc4>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <ENTER_PASSWORD+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	69 a9       	ldd	r22, Y+49	; 0x31
    1f36:	7a a9       	ldd	r23, Y+50	; 0x32
    1f38:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4c:	9c a7       	std	Y+44, r25	; 0x2c
    1f4e:	8b a7       	std	Y+43, r24	; 0x2b
    1f50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <ENTER_PASSWORD+0x10c>
    1f58:	9c a7       	std	Y+44, r25	; 0x2c
    1f5a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			g_pass1[i]=num;
    1f5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	fc 01       	movw	r30, r24
    1f64:	e6 5e       	subi	r30, 0xE6	; 230
    1f66:	fe 4f       	sbci	r31, 0xFE	; 254
    1f68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f6a:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1f6c:	8a e2       	ldi	r24, 0x2A	; 42
    1f6e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_displayCharacter>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a8 e4       	ldi	r26, 0x48	; 72
    1f78:	b3 e4       	ldi	r27, 0x43	; 67
    1f7a:	8f a3       	std	Y+39, r24	; 0x27
    1f7c:	98 a7       	std	Y+40, r25	; 0x28
    1f7e:	a9 a7       	std	Y+41, r26	; 0x29
    1f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f82:	6f a1       	ldd	r22, Y+39	; 0x27
    1f84:	78 a5       	ldd	r23, Y+40	; 0x28
    1f86:	89 a5       	ldd	r24, Y+41	; 0x29
    1f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a ef       	ldi	r20, 0xFA	; 250
    1f90:	54 e4       	ldi	r21, 0x44	; 68
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8b a3       	std	Y+35, r24	; 0x23
    1f9c:	9c a3       	std	Y+36, r25	; 0x24
    1f9e:	ad a3       	std	Y+37, r26	; 0x25
    1fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb6:	88 23       	and	r24, r24
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <ENTER_PASSWORD+0x17c>
		__ticks = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9a a3       	std	Y+34, r25	; 0x22
    1fc0:	89 a3       	std	Y+33, r24	; 0x21
    1fc2:	3f c0       	rjmp	.+126    	; 0x2042 <ENTER_PASSWORD+0x1fa>
	else if (__tmp > 65535)
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	57 e4       	ldi	r21, 0x47	; 71
    1fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	4c f5       	brge	.+82     	; 0x202e <ENTER_PASSWORD+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fde:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9a a3       	std	Y+34, r25	; 0x22
    2002:	89 a3       	std	Y+33, r24	; 0x21
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <ENTER_PASSWORD+0x1dc>
    2006:	88 ec       	ldi	r24, 0xC8	; 200
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	98 a3       	std	Y+32, r25	; 0x20
    200c:	8f 8f       	std	Y+31, r24	; 0x1f
    200e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2010:	98 a1       	ldd	r25, Y+32	; 0x20
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <ENTER_PASSWORD+0x1ca>
    2016:	98 a3       	std	Y+32, r25	; 0x20
    2018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9a a3       	std	Y+34, r25	; 0x22
    2022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	89 a1       	ldd	r24, Y+33	; 0x21
    2026:	9a a1       	ldd	r25, Y+34	; 0x22
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	69 f7       	brne	.-38     	; 0x2006 <ENTER_PASSWORD+0x1be>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <ENTER_PASSWORD+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	6b a1       	ldd	r22, Y+35	; 0x23
    2030:	7c a1       	ldd	r23, Y+36	; 0x24
    2032:	8d a1       	ldd	r24, Y+37	; 0x25
    2034:	9e a1       	ldd	r25, Y+38	; 0x26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9a a3       	std	Y+34, r25	; 0x22
    2040:	89 a3       	std	Y+33, r24	; 0x21
    2042:	89 a1       	ldd	r24, Y+33	; 0x21
    2044:	9a a1       	ldd	r25, Y+34	; 0x22
    2046:	9e 8f       	std	Y+30, r25	; 0x1e
    2048:	8d 8f       	std	Y+29, r24	; 0x1d
    204a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <ENTER_PASSWORD+0x206>
    2052:	9e 8f       	std	Y+30, r25	; 0x1e
    2054:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 num = 0;
	LCD_displayString("Enter Password");
	LCD_moveCursor(1,0);

	/* Enter first password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    2056:	8a ad       	ldd	r24, Y+58	; 0x3a
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	8a af       	std	Y+58, r24	; 0x3a
    205c:	8a ad       	ldd	r24, Y+58	; 0x3a
    205e:	85 30       	cpi	r24, 0x05	; 5
    2060:	08 f4       	brcc	.+2      	; 0x2064 <ENTER_PASSWORD+0x21c>
    2062:	07 cf       	rjmp	.-498    	; 0x1e72 <ENTER_PASSWORD+0x2a>
			_delay_ms(200);
			g_pass1[i]=num;
			LCD_displayCharacter('*');
			_delay_ms(200);
		}
	LCD_clearScreen();
    2064:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
	LCD_displayString("Renter Password");
    2070:	85 e7       	ldi	r24, 0x75	; 117
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	LCD_moveCursor(1,0);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>

	/* Enter second password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    2080:	19 ae       	std	Y+57, r1	; 0x39
    2082:	f5 c0       	rjmp	.+490    	; 0x226e <ENTER_PASSWORD+0x426>
		{
			num = KEYPAD_getPressedKey();
    2084:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2088:	8b af       	std	Y+59, r24	; 0x3b
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a8 e4       	ldi	r26, 0x48	; 72
    2090:	b3 e4       	ldi	r27, 0x43	; 67
    2092:	89 8f       	std	Y+25, r24	; 0x19
    2094:	9a 8f       	std	Y+26, r25	; 0x1a
    2096:	ab 8f       	std	Y+27, r26	; 0x1b
    2098:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	69 8d       	ldd	r22, Y+25	; 0x19
    209c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a ef       	ldi	r20, 0xFA	; 250
    20a8:	54 e4       	ldi	r21, 0x44	; 68
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	8d 8b       	std	Y+21, r24	; 0x15
    20b4:	9e 8b       	std	Y+22, r25	; 0x16
    20b6:	af 8b       	std	Y+23, r26	; 0x17
    20b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ba:	6d 89       	ldd	r22, Y+21	; 0x15
    20bc:	7e 89       	ldd	r23, Y+22	; 0x16
    20be:	8f 89       	ldd	r24, Y+23	; 0x17
    20c0:	98 8d       	ldd	r25, Y+24	; 0x18
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	2c f4       	brge	.+10     	; 0x20dc <ENTER_PASSWORD+0x294>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9c 8b       	std	Y+20, r25	; 0x14
    20d8:	8b 8b       	std	Y+19, r24	; 0x13
    20da:	3f c0       	rjmp	.+126    	; 0x215a <ENTER_PASSWORD+0x312>
	else if (__tmp > 65535)
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	3f ef       	ldi	r19, 0xFF	; 255
    20e8:	4f e7       	ldi	r20, 0x7F	; 127
    20ea:	57 e4       	ldi	r21, 0x47	; 71
    20ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	4c f5       	brge	.+82     	; 0x2146 <ENTER_PASSWORD+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	69 8d       	ldd	r22, Y+25	; 0x19
    20f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
    211c:	0f c0       	rjmp	.+30     	; 0x213c <ENTER_PASSWORD+0x2f4>
    211e:	88 ec       	ldi	r24, 0xC8	; 200
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
    2126:	89 89       	ldd	r24, Y+17	; 0x11
    2128:	9a 89       	ldd	r25, Y+18	; 0x12
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <ENTER_PASSWORD+0x2e2>
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	69 f7       	brne	.-38     	; 0x211e <ENTER_PASSWORD+0x2d6>
    2144:	14 c0       	rjmp	.+40     	; 0x216e <ENTER_PASSWORD+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	8f 87       	std	Y+15, r24	; 0x0f
    2162:	8f 85       	ldd	r24, Y+15	; 0x0f
    2164:	98 89       	ldd	r25, Y+16	; 0x10
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <ENTER_PASSWORD+0x31e>
    216a:	98 8b       	std	Y+16, r25	; 0x10
    216c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			g_pass2[i]=num;
    216e:	89 ad       	ldd	r24, Y+57	; 0x39
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	fc 01       	movw	r30, r24
    2176:	e1 5e       	subi	r30, 0xE1	; 225
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	8b ad       	ldd	r24, Y+59	; 0x3b
    217c:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    217e:	8a e2       	ldi	r24, 0x2A	; 42
    2180:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_displayCharacter>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a8 e4       	ldi	r26, 0x48	; 72
    218a:	b3 e4       	ldi	r27, 0x43	; 67
    218c:	8b 87       	std	Y+11, r24	; 0x0b
    218e:	9c 87       	std	Y+12, r25	; 0x0c
    2190:	ad 87       	std	Y+13, r26	; 0x0d
    2192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8f 83       	std	Y+7, r24	; 0x07
    21ae:	98 87       	std	Y+8, r25	; 0x08
    21b0:	a9 87       	std	Y+9, r26	; 0x09
    21b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <ENTER_PASSWORD+0x38e>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <ENTER_PASSWORD+0x40c>
	else if (__tmp > 65535)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <ENTER_PASSWORD+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <ENTER_PASSWORD+0x3ee>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <ENTER_PASSWORD+0x3dc>
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <ENTER_PASSWORD+0x3d0>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <ENTER_PASSWORD+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <ENTER_PASSWORD+0x418>
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(0,0);
	LCD_displayString("Renter Password");
	LCD_moveCursor(1,0);

	/* Enter second password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    2268:	89 ad       	ldd	r24, Y+57	; 0x39
    226a:	8f 5f       	subi	r24, 0xFF	; 255
    226c:	89 af       	std	Y+57, r24	; 0x39
    226e:	89 ad       	ldd	r24, Y+57	; 0x39
    2270:	85 30       	cpi	r24, 0x05	; 5
    2272:	08 f4       	brcc	.+2      	; 0x2276 <ENTER_PASSWORD+0x42e>
    2274:	07 cf       	rjmp	.-498    	; 0x2084 <ENTER_PASSWORD+0x23c>
			_delay_ms(200);
			g_pass2[i]=num;
			LCD_displayCharacter('*');
			_delay_ms(200);
		}
	LCD_clearScreen();
    2276:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>

}
    227a:	eb 96       	adiw	r28, 0x3b	; 59
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <SEND_TO_MC2>:

void SEND_TO_MC2 ( uint8 *ptr )
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <SEND_TO_MC2+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
	/* Send ready message to MC2 */
	UART_sendByte(MC1_READY);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
	/* Wait untill recieve ready message from MC2 */
	while(UART_recieveByte() != MC2_READY);
    22a0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    22a4:	80 31       	cpi	r24, 0x10	; 16
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <SEND_TO_MC2+0x14>
	/* Send password to MC2 */
	SEND_PASS(ptr);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	0e 94 61 11 	call	0x22c2	; 0x22c2 <SEND_PASS>
	/* Wait untill recieve ready message from MC2 */
	while(UART_recieveByte() != MC2_READY);
    22b0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    22b4:	80 31       	cpi	r24, 0x10	; 16
    22b6:	e1 f7       	brne	.-8      	; 0x22b0 <SEND_TO_MC2+0x24>
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <SEND_PASS>:
void SEND_PASS( uint8 *ptr)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <SEND_PASS+0x6>
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	9b 83       	std	Y+3, r25	; 0x03
    22d0:	8a 83       	std	Y+2, r24	; 0x02
	/* Send password to MC2 by sending element element inside the array */
	 for( uint8 i = 0; i < 5; i++)
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <SEND_PASS+0x30>
		  {
			  UART_sendByte(ptr[i]);
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	9b 81       	ldd	r25, Y+3	; 0x03
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	80 81       	ld	r24, Z
    22e8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY);
}
void SEND_PASS( uint8 *ptr)
{
	/* Send password to MC2 by sending element element inside the array */
	 for( uint8 i = 0; i < 5; i++)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	85 30       	cpi	r24, 0x05	; 5
    22f6:	78 f3       	brcs	.-34     	; 0x22d6 <SEND_PASS+0x14>
		  {
			  UART_sendByte(ptr[i]);
		  }
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <CHECK>:

void CHECK( void )
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	2e 97       	sbiw	r28, 0x0e	; 14
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
	/* Send ready message to MC2 */
	UART_sendByte(MC1_READY);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
	/* Wait untill recieve correct message from MC2 */
	if( UART_recieveByte() == CORRECT )
    231e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    2322:	85 30       	cpi	r24, 0x05	; 5
    2324:	29 f4       	brne	.+10     	; 0x2330 <CHECK+0x2c>
	{
		/* if recieve correct message display on LCD correct pass */
		LCD_displayString("CORRECT PASS");
    2326:	85 e8       	ldi	r24, 0x85	; 133
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
    232e:	7c c0       	rjmp	.+248    	; 0x2428 <CHECK+0x124>
	{
		/* if recieve incorrect message:
		 * 1.display on LCD incorrect pass
		 * 2.tell the user to enter 2 new passwords
		 */
		LCD_displayString("INCORRECT PASS");
    2330:	82 e9       	ldi	r24, 0x92	; 146
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	aa ef       	ldi	r26, 0xFA	; 250
    233e:	b3 e4       	ldi	r27, 0x43	; 67
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a ef       	ldi	r20, 0xFA	; 250
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 83       	std	Y+7, r24	; 0x07
    2362:	98 87       	std	Y+8, r25	; 0x08
    2364:	a9 87       	std	Y+9, r26	; 0x09
    2366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <CHECK+0x86>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <CHECK+0x104>
	else if (__tmp > 65535)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <CHECK+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <CHECK+0xe6>
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <CHECK+0xd4>
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <CHECK+0xc8>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <CHECK+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <CHECK+0x110>
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_clearScreen();
    241c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
		CREATE_PASSWORD();
    2420:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <CREATE_PASSWORD>
		CHECK();
    2424:	0e 94 82 11 	call	0x2304	; 0x2304 <CHECK>
	}
}
    2428:	2e 96       	adiw	r28, 0x0e	; 14
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <DISPLAY_DOOR_INFO>:

void DISPLAY_DOOR_INFO( void )
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	2b 97       	sbiw	r28, 0x0b	; 11
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
	/* Initialize Timer driver through structure configuration */
	TIMER0_configType config_1 ={normal, NORMAL_MODE,F_CPU_CLK_1024, NORMAL_ENABLE, 0 ,0};
    244e:	ce 01       	movw	r24, r28
    2450:	01 96       	adiw	r24, 0x01	; 1
    2452:	98 87       	std	Y+8, r25	; 0x08
    2454:	8f 83       	std	Y+7, r24	; 0x07
    2456:	ec e0       	ldi	r30, 0x0C	; 12
    2458:	f1 e0       	ldi	r31, 0x01	; 1
    245a:	fa 87       	std	Y+10, r31	; 0x0a
    245c:	e9 87       	std	Y+9, r30	; 0x09
    245e:	f6 e0       	ldi	r31, 0x06	; 6
    2460:	fb 87       	std	Y+11, r31	; 0x0b
    2462:	e9 85       	ldd	r30, Y+9	; 0x09
    2464:	fa 85       	ldd	r31, Y+10	; 0x0a
    2466:	00 80       	ld	r0, Z
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	9a 87       	std	Y+10, r25	; 0x0a
    2470:	89 87       	std	Y+9, r24	; 0x09
    2472:	ef 81       	ldd	r30, Y+7	; 0x07
    2474:	f8 85       	ldd	r31, Y+8	; 0x08
    2476:	00 82       	st	Z, r0
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	98 87       	std	Y+8, r25	; 0x08
    2480:	8f 83       	std	Y+7, r24	; 0x07
    2482:	9b 85       	ldd	r25, Y+11	; 0x0b
    2484:	91 50       	subi	r25, 0x01	; 1
    2486:	9b 87       	std	Y+11, r25	; 0x0b
    2488:	eb 85       	ldd	r30, Y+11	; 0x0b
    248a:	ee 23       	and	r30, r30
    248c:	51 f7       	brne	.-44     	; 0x2462 <DISPLAY_DOOR_INFO+0x28>
	TIMER0_init( &config_1 );
    248e:	ce 01       	movw	r24, r28
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	0e 94 9a 1a 	call	0x3534	; 0x3534 <TIMER0_init>
	LCD_clearScreen();
    2496:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
    249a:	0c c0       	rjmp	.+24     	; 0x24b4 <DISPLAY_DOOR_INFO+0x7a>
	/* Display open door message inside ISR OF timer 0 for 15 seconds */
	while(g_ticks >= 0 && g_ticks <= 459 )
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	9f e0       	ldi	r25, 0x0F	; 15
    24a0:	0e 94 11 1b 	call	0x3622	; 0x3622 <TIMER0_setCallBack>
		LCD_moveCursor(0,0);
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
		LCD_displayString("Door open");
    24ac:	81 ea       	ldi	r24, 0xA1	; 161
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	/* Initialize Timer driver through structure configuration */
	TIMER0_configType config_1 ={normal, NORMAL_MODE,F_CPU_CLK_1024, NORMAL_ENABLE, 0 ,0};
	TIMER0_init( &config_1 );
	LCD_clearScreen();
	/* Display open door message inside ISR OF timer 0 for 15 seconds */
	while(g_ticks >= 0 && g_ticks <= 459 )
    24b4:	80 91 25 01 	lds	r24, 0x0125
    24b8:	90 91 26 01 	lds	r25, 0x0126
    24bc:	f1 e0       	ldi	r31, 0x01	; 1
    24be:	8c 3c       	cpi	r24, 0xCC	; 204
    24c0:	9f 07       	cpc	r25, r31
    24c2:	60 f3       	brcs	.-40     	; 0x249c <DISPLAY_DOOR_INFO+0x62>
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
		LCD_moveCursor(0,0);
		LCD_displayString("Door open");
	}
	g_ticks = 0;
    24c4:	10 92 26 01 	sts	0x0126, r1
    24c8:	10 92 25 01 	sts	0x0125, r1
	LCD_clearScreen();
    24cc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
    24d0:	0c c0       	rjmp	.+24     	; 0x24ea <DISPLAY_DOOR_INFO+0xb0>
	/* Display door opened message inside ISR OF timer 0 for 3 seconds */
	while(g_ticks >= 0 && g_ticks <= 92 )
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	9f e0       	ldi	r25, 0x0F	; 15
    24d6:	0e 94 11 1b 	call	0x3622	; 0x3622 <TIMER0_setCallBack>
		LCD_moveCursor(0,0);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
		LCD_displayString("Door opened");
    24e2:	8b ea       	ldi	r24, 0xAB	; 171
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
		LCD_displayString("Door open");
	}
	g_ticks = 0;
	LCD_clearScreen();
	/* Display door opened message inside ISR OF timer 0 for 3 seconds */
	while(g_ticks >= 0 && g_ticks <= 92 )
    24ea:	80 91 25 01 	lds	r24, 0x0125
    24ee:	90 91 26 01 	lds	r25, 0x0126
    24f2:	8d 35       	cpi	r24, 0x5D	; 93
    24f4:	91 05       	cpc	r25, r1
    24f6:	68 f3       	brcs	.-38     	; 0x24d2 <DISPLAY_DOOR_INFO+0x98>
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
		LCD_moveCursor(0,0);
		LCD_displayString("Door opened");
	}
	g_ticks = 0;
    24f8:	10 92 26 01 	sts	0x0126, r1
    24fc:	10 92 25 01 	sts	0x0125, r1
	LCD_clearScreen();
    2500:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
    2504:	0c c0       	rjmp	.+24     	; 0x251e <DISPLAY_DOOR_INFO+0xe4>
	/* Display close door message inside ISR OF timer 0 for 15 seconds */
	while(g_ticks >= 0 && g_ticks <= 459 )
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	9f e0       	ldi	r25, 0x0F	; 15
    250a:	0e 94 11 1b 	call	0x3622	; 0x3622 <TIMER0_setCallBack>
		LCD_moveCursor(0,0);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
		LCD_displayString("Door close");
    2516:	87 eb       	ldi	r24, 0xB7	; 183
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
		LCD_displayString("Door opened");
	}
	g_ticks = 0;
	LCD_clearScreen();
	/* Display close door message inside ISR OF timer 0 for 15 seconds */
	while(g_ticks >= 0 && g_ticks <= 459 )
    251e:	80 91 25 01 	lds	r24, 0x0125
    2522:	90 91 26 01 	lds	r25, 0x0126
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	8c 3c       	cpi	r24, 0xCC	; 204
    252a:	92 07       	cpc	r25, r18
    252c:	60 f3       	brcs	.-40     	; 0x2506 <DISPLAY_DOOR_INFO+0xcc>
	{
		TIMER0_setCallBack(INCREMENT_TICKS);
		LCD_moveCursor(0,0);
		LCD_displayString("Door close");
	}
	LCD_clearScreen();
    252e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	/* Deintialize timer0 driver */
	TIMER0_DeInit();
    2532:	0e 94 23 1b 	call	0x3646	; 0x3646 <TIMER0_DeInit>
	g_ticks = 0;
    2536:	10 92 26 01 	sts	0x0126, r1
    253a:	10 92 25 01 	sts	0x0125, r1

}
    253e:	2b 96       	adiw	r28, 0x0b	; 11
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <MAIN_MENU>:
void MAIN_MENU()
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	aa 97       	sbiw	r28, 0x2a	; 42
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2564:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	LCD_displayString("+:OPEN DOOR");
    2568:	82 ec       	ldi	r24, 0xC2	; 194
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	LCD_moveCursor(1,0);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
	LCD_displayString("-:CHANGE PASS");
    2578:	8e ec       	ldi	r24, 0xCE	; 206
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	do
	 {
		g_choice = KEYPAD_getPressedKey();
    2580:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2584:	80 93 24 01 	sts	0x0124, r24
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a8 e4       	ldi	r26, 0x48	; 72
    258e:	b3 e4       	ldi	r27, 0x43	; 67
    2590:	8f a3       	std	Y+39, r24	; 0x27
    2592:	98 a7       	std	Y+40, r25	; 0x28
    2594:	a9 a7       	std	Y+41, r26	; 0x29
    2596:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6f a1       	ldd	r22, Y+39	; 0x27
    259a:	78 a5       	ldd	r23, Y+40	; 0x28
    259c:	89 a5       	ldd	r24, Y+41	; 0x29
    259e:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a ef       	ldi	r20, 0xFA	; 250
    25a6:	54 e4       	ldi	r21, 0x44	; 68
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8b a3       	std	Y+35, r24	; 0x23
    25b2:	9c a3       	std	Y+36, r25	; 0x24
    25b4:	ad a3       	std	Y+37, r26	; 0x25
    25b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <MAIN_MENU+0x8a>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <MAIN_MENU+0x108>
	else if (__tmp > 65535)
    25da:	6b a1       	ldd	r22, Y+35	; 0x23
    25dc:	7c a1       	ldd	r23, Y+36	; 0x24
    25de:	8d a1       	ldd	r24, Y+37	; 0x25
    25e0:	9e a1       	ldd	r25, Y+38	; 0x26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <MAIN_MENU+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6f a1       	ldd	r22, Y+39	; 0x27
    25f4:	78 a5       	ldd	r23, Y+40	; 0x28
    25f6:	89 a5       	ldd	r24, Y+41	; 0x29
    25f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9a a3       	std	Y+34, r25	; 0x22
    2618:	89 a3       	std	Y+33, r24	; 0x21
    261a:	0f c0       	rjmp	.+30     	; 0x263a <MAIN_MENU+0xea>
    261c:	88 ec       	ldi	r24, 0xC8	; 200
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	98 a3       	std	Y+32, r25	; 0x20
    2622:	8f 8f       	std	Y+31, r24	; 0x1f
    2624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2626:	98 a1       	ldd	r25, Y+32	; 0x20
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <MAIN_MENU+0xd8>
    262c:	98 a3       	std	Y+32, r25	; 0x20
    262e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	89 a1       	ldd	r24, Y+33	; 0x21
    2632:	9a a1       	ldd	r25, Y+34	; 0x22
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9a a3       	std	Y+34, r25	; 0x22
    2638:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	89 a1       	ldd	r24, Y+33	; 0x21
    263c:	9a a1       	ldd	r25, Y+34	; 0x22
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <MAIN_MENU+0xcc>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <MAIN_MENU+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6b a1       	ldd	r22, Y+35	; 0x23
    2646:	7c a1       	ldd	r23, Y+36	; 0x24
    2648:	8d a1       	ldd	r24, Y+37	; 0x25
    264a:	9e a1       	ldd	r25, Y+38	; 0x26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9a a3       	std	Y+34, r25	; 0x22
    2656:	89 a3       	std	Y+33, r24	; 0x21
    2658:	89 a1       	ldd	r24, Y+33	; 0x21
    265a:	9a a1       	ldd	r25, Y+34	; 0x22
    265c:	9e 8f       	std	Y+30, r25	; 0x1e
    265e:	8d 8f       	std	Y+29, r24	; 0x1d
    2660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <MAIN_MENU+0x114>
    2668:	9e 8f       	std	Y+30, r25	; 0x1e
    266a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
	 }
	/* If user press '+', the user will go to open door function
	 * If user press '-', the user will go to change password function
	 */
	while( g_choice != '+' && g_choice != '-' );
    266c:	80 91 24 01 	lds	r24, 0x0124
    2670:	8b 32       	cpi	r24, 0x2B	; 43
    2672:	29 f0       	breq	.+10     	; 0x267e <MAIN_MENU+0x12e>
    2674:	80 91 24 01 	lds	r24, 0x0124
    2678:	8d 32       	cpi	r24, 0x2D	; 45
    267a:	09 f0       	breq	.+2      	; 0x267e <MAIN_MENU+0x12e>
    267c:	81 cf       	rjmp	.-254    	; 0x2580 <MAIN_MENU+0x30>
	if( g_choice == '+')
    267e:	80 91 24 01 	lds	r24, 0x0124
    2682:	8b 32       	cpi	r24, 0x2B	; 43
    2684:	09 f0       	breq	.+2      	; 0x2688 <MAIN_MENU+0x138>
    2686:	75 c0       	rjmp	.+234    	; 0x2772 <MAIN_MENU+0x222>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a8 e4       	ldi	r26, 0x48	; 72
    268e:	b3 e4       	ldi	r27, 0x43	; 67
    2690:	89 8f       	std	Y+25, r24	; 0x19
    2692:	9a 8f       	std	Y+26, r25	; 0x1a
    2694:	ab 8f       	std	Y+27, r26	; 0x1b
    2696:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	69 8d       	ldd	r22, Y+25	; 0x19
    269a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a ef       	ldi	r20, 0xFA	; 250
    26a6:	54 e4       	ldi	r21, 0x44	; 68
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8d 8b       	std	Y+21, r24	; 0x15
    26b2:	9e 8b       	std	Y+22, r25	; 0x16
    26b4:	af 8b       	std	Y+23, r26	; 0x17
    26b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ba:	7e 89       	ldd	r23, Y+22	; 0x16
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
    26be:	98 8d       	ldd	r25, Y+24	; 0x18
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <MAIN_MENU+0x18a>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <MAIN_MENU+0x208>
	else if (__tmp > 65535)
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <MAIN_MENU+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9c 8b       	std	Y+20, r25	; 0x14
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	0f c0       	rjmp	.+30     	; 0x273a <MAIN_MENU+0x1ea>
    271c:	88 ec       	ldi	r24, 0xC8	; 200
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	89 8b       	std	Y+17, r24	; 0x11
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <MAIN_MENU+0x1d8>
    272c:	9a 8b       	std	Y+18, r25	; 0x12
    272e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <MAIN_MENU+0x1cc>
    2742:	14 c0       	rjmp	.+40     	; 0x276c <MAIN_MENU+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6d 89       	ldd	r22, Y+21	; 0x15
    2746:	7e 89       	ldd	r23, Y+22	; 0x16
    2748:	8f 89       	ldd	r24, Y+23	; 0x17
    274a:	98 8d       	ldd	r25, Y+24	; 0x18
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	98 8b       	std	Y+16, r25	; 0x10
    275e:	8f 87       	std	Y+15, r24	; 0x0f
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	98 89       	ldd	r25, Y+16	; 0x10
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <MAIN_MENU+0x214>
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(200);
		OPEN_DOOR();
    276c:	0e 94 36 14 	call	0x286c	; 0x286c <OPEN_DOOR>
    2770:	74 c0       	rjmp	.+232    	; 0x285a <MAIN_MENU+0x30a>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a8 e4       	ldi	r26, 0x48	; 72
    2778:	b3 e4       	ldi	r27, 0x43	; 67
    277a:	8b 87       	std	Y+11, r24	; 0x0b
    277c:	9c 87       	std	Y+12, r25	; 0x0c
    277e:	ad 87       	std	Y+13, r26	; 0x0d
    2780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2782:	6b 85       	ldd	r22, Y+11	; 0x0b
    2784:	7c 85       	ldd	r23, Y+12	; 0x0c
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a ef       	ldi	r20, 0xFA	; 250
    2790:	54 e4       	ldi	r21, 0x44	; 68
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8f 83       	std	Y+7, r24	; 0x07
    279c:	98 87       	std	Y+8, r25	; 0x08
    279e:	a9 87       	std	Y+9, r26	; 0x09
    27a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <MAIN_MENU+0x274>
		__ticks = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	3f c0       	rjmp	.+126    	; 0x2842 <MAIN_MENU+0x2f2>
	else if (__tmp > 65535)
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	4c f5       	brge	.+82     	; 0x282e <MAIN_MENU+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27de:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <MAIN_MENU+0x2d4>
    2806:	88 ec       	ldi	r24, 0xC8	; 200
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <MAIN_MENU+0x2c2>
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	69 f7       	brne	.-38     	; 0x2806 <MAIN_MENU+0x2b6>
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <MAIN_MENU+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <MAIN_MENU+0x2fe>
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		_delay_ms(200);
		CHANGE_PASS();
    2856:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <CHANGE_PASS>
	}
}
    285a:	aa 96       	adiw	r28, 0x2a	; 42
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <OPEN_DOOR>:

void OPEN_DOOR()
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	ea 97       	sbiw	r28, 0x3a	; 58
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2880:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	uint8 num = 0;
    2884:	1a ae       	std	Y+58, r1	; 0x3a
	LCD_displayString("Enter Password");
    2886:	86 e6       	ldi	r24, 0x66	; 102
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	LCD_moveCursor(1,0);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a8 e4       	ldi	r26, 0x48	; 72
    289c:	b3 e4       	ldi	r27, 0x43	; 67
    289e:	8d ab       	std	Y+53, r24	; 0x35
    28a0:	9e ab       	std	Y+54, r25	; 0x36
    28a2:	af ab       	std	Y+55, r26	; 0x37
    28a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a6:	6d a9       	ldd	r22, Y+53	; 0x35
    28a8:	7e a9       	ldd	r23, Y+54	; 0x36
    28aa:	8f a9       	ldd	r24, Y+55	; 0x37
    28ac:	98 ad       	ldd	r25, Y+56	; 0x38
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a ef       	ldi	r20, 0xFA	; 250
    28b4:	54 e4       	ldi	r21, 0x44	; 68
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	89 ab       	std	Y+49, r24	; 0x31
    28c0:	9a ab       	std	Y+50, r25	; 0x32
    28c2:	ab ab       	std	Y+51, r26	; 0x33
    28c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c6:	69 a9       	ldd	r22, Y+49	; 0x31
    28c8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ca:	8b a9       	ldd	r24, Y+51	; 0x33
    28cc:	9c a9       	ldd	r25, Y+52	; 0x34
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	2c f4       	brge	.+10     	; 0x28e8 <OPEN_DOOR+0x7c>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
    28e6:	3f c0       	rjmp	.+126    	; 0x2966 <OPEN_DOOR+0xfa>
	else if (__tmp > 65535)
    28e8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ea:	7a a9       	ldd	r23, Y+50	; 0x32
    28ec:	8b a9       	ldd	r24, Y+51	; 0x33
    28ee:	9c a9       	ldd	r25, Y+52	; 0x34
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	57 e4       	ldi	r21, 0x47	; 71
    28f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fc:	18 16       	cp	r1, r24
    28fe:	4c f5       	brge	.+82     	; 0x2952 <OPEN_DOOR+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	6d a9       	ldd	r22, Y+53	; 0x35
    2902:	7e a9       	ldd	r23, Y+54	; 0x36
    2904:	8f a9       	ldd	r24, Y+55	; 0x37
    2906:	98 ad       	ldd	r25, Y+56	; 0x38
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <OPEN_DOOR+0xdc>
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9e a7       	std	Y+46, r25	; 0x2e
    2930:	8d a7       	std	Y+45, r24	; 0x2d
    2932:	8d a5       	ldd	r24, Y+45	; 0x2d
    2934:	9e a5       	ldd	r25, Y+46	; 0x2e
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <OPEN_DOOR+0xca>
    293a:	9e a7       	std	Y+46, r25	; 0x2e
    293c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2940:	98 a9       	ldd	r25, Y+48	; 0x30
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	98 ab       	std	Y+48, r25	; 0x30
    2946:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	8f a5       	ldd	r24, Y+47	; 0x2f
    294a:	98 a9       	ldd	r25, Y+48	; 0x30
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	69 f7       	brne	.-38     	; 0x292a <OPEN_DOOR+0xbe>
    2950:	14 c0       	rjmp	.+40     	; 0x297a <OPEN_DOOR+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	69 a9       	ldd	r22, Y+49	; 0x31
    2954:	7a a9       	ldd	r23, Y+50	; 0x32
    2956:	8b a9       	ldd	r24, Y+51	; 0x33
    2958:	9c a9       	ldd	r25, Y+52	; 0x34
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	98 ab       	std	Y+48, r25	; 0x30
    2964:	8f a7       	std	Y+47, r24	; 0x2f
    2966:	8f a5       	ldd	r24, Y+47	; 0x2f
    2968:	98 a9       	ldd	r25, Y+48	; 0x30
    296a:	9c a7       	std	Y+44, r25	; 0x2c
    296c:	8b a7       	std	Y+43, r24	; 0x2b
    296e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2970:	9c a5       	ldd	r25, Y+44	; 0x2c
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <OPEN_DOOR+0x106>
    2976:	9c a7       	std	Y+44, r25	; 0x2c
    2978:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	/* Enter password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    297a:	19 ae       	std	Y+57, r1	; 0x39
    297c:	f5 c0       	rjmp	.+490    	; 0x2b68 <OPEN_DOOR+0x2fc>
		{
			num = KEYPAD_getPressedKey();
    297e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2982:	8a af       	std	Y+58, r24	; 0x3a
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a8 e4       	ldi	r26, 0x48	; 72
    298a:	b3 e4       	ldi	r27, 0x43	; 67
    298c:	8f a3       	std	Y+39, r24	; 0x27
    298e:	98 a7       	std	Y+40, r25	; 0x28
    2990:	a9 a7       	std	Y+41, r26	; 0x29
    2992:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2994:	6f a1       	ldd	r22, Y+39	; 0x27
    2996:	78 a5       	ldd	r23, Y+40	; 0x28
    2998:	89 a5       	ldd	r24, Y+41	; 0x29
    299a:	9a a5       	ldd	r25, Y+42	; 0x2a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ef       	ldi	r20, 0xFA	; 250
    29a2:	54 e4       	ldi	r21, 0x44	; 68
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8b a3       	std	Y+35, r24	; 0x23
    29ae:	9c a3       	std	Y+36, r25	; 0x24
    29b0:	ad a3       	std	Y+37, r26	; 0x25
    29b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	2c f4       	brge	.+10     	; 0x29d6 <OPEN_DOOR+0x16a>
		__ticks = 1;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
    29d4:	3f c0       	rjmp	.+126    	; 0x2a54 <OPEN_DOOR+0x1e8>
	else if (__tmp > 65535)
    29d6:	6b a1       	ldd	r22, Y+35	; 0x23
    29d8:	7c a1       	ldd	r23, Y+36	; 0x24
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	4c f5       	brge	.+82     	; 0x2a40 <OPEN_DOOR+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	6f a1       	ldd	r22, Y+39	; 0x27
    29f0:	78 a5       	ldd	r23, Y+40	; 0x28
    29f2:	89 a5       	ldd	r24, Y+41	; 0x29
    29f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <OPEN_DOOR+0x1ca>
    2a18:	88 ec       	ldi	r24, 0xC8	; 200
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	98 a3       	std	Y+32, r25	; 0x20
    2a1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a22:	98 a1       	ldd	r25, Y+32	; 0x20
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <OPEN_DOOR+0x1b8>
    2a28:	98 a3       	std	Y+32, r25	; 0x20
    2a2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	89 a1       	ldd	r24, Y+33	; 0x21
    2a38:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	69 f7       	brne	.-38     	; 0x2a18 <OPEN_DOOR+0x1ac>
    2a3e:	14 c0       	rjmp	.+40     	; 0x2a68 <OPEN_DOOR+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9a a3       	std	Y+34, r25	; 0x22
    2a52:	89 a3       	std	Y+33, r24	; 0x21
    2a54:	89 a1       	ldd	r24, Y+33	; 0x21
    2a56:	9a a1       	ldd	r25, Y+34	; 0x22
    2a58:	9e 8f       	std	Y+30, r25	; 0x1e
    2a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <OPEN_DOOR+0x1f4>
    2a64:	9e 8f       	std	Y+30, r25	; 0x1e
    2a66:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			g_pass1[i]=num;
    2a68:	89 ad       	ldd	r24, Y+57	; 0x39
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e6 5e       	subi	r30, 0xE6	; 230
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a76:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2a78:	8a e2       	ldi	r24, 0x2A	; 42
    2a7a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_displayCharacter>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a8 e4       	ldi	r26, 0x48	; 72
    2a84:	b3 e4       	ldi	r27, 0x43	; 67
    2a86:	89 8f       	std	Y+25, r24	; 0x19
    2a88:	9a 8f       	std	Y+26, r25	; 0x1a
    2a8a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a ef       	ldi	r20, 0xFA	; 250
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8d 8b       	std	Y+21, r24	; 0x15
    2aa8:	9e 8b       	std	Y+22, r25	; 0x16
    2aaa:	af 8b       	std	Y+23, r26	; 0x17
    2aac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aae:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <OPEN_DOOR+0x264>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <OPEN_DOOR+0x2e2>
	else if (__tmp > 65535)
    2ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <OPEN_DOOR+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9c 8b       	std	Y+20, r25	; 0x14
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <OPEN_DOOR+0x2c4>
    2b12:	88 ec       	ldi	r24, 0xC8	; 200
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
    2b1a:	89 89       	ldd	r24, Y+17	; 0x11
    2b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <OPEN_DOOR+0x2b2>
    2b22:	9a 8b       	std	Y+18, r25	; 0x12
    2b24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <OPEN_DOOR+0x2a6>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <OPEN_DOOR+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b40:	98 8d       	ldd	r25, Y+24	; 0x18
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	9c 89       	ldd	r25, Y+20	; 0x14
    2b52:	98 8b       	std	Y+16, r25	; 0x10
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
    2b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b58:	98 89       	ldd	r25, Y+16	; 0x10
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <OPEN_DOOR+0x2ee>
    2b5e:	98 8b       	std	Y+16, r25	; 0x10
    2b60:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 num = 0;
	LCD_displayString("Enter Password");
	LCD_moveCursor(1,0);
	_delay_ms(200);
	/* Enter password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    2b62:	89 ad       	ldd	r24, Y+57	; 0x39
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	89 af       	std	Y+57, r24	; 0x39
    2b68:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6a:	85 30       	cpi	r24, 0x05	; 5
    2b6c:	08 f4       	brcc	.+2      	; 0x2b70 <OPEN_DOOR+0x304>
    2b6e:	07 cf       	rjmp	.-498    	; 0x297e <OPEN_DOOR+0x112>
			_delay_ms(200);
		}


	/* Send open message to MC2 */
	UART_sendByte(OPEN_DOOR_);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>

	/* Wait untill recieve ready message from MC2 */
	while(UART_recieveByte() != MC2_READY);
    2b76:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    2b7a:	80 31       	cpi	r24, 0x10	; 16
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <OPEN_DOOR+0x30a>
	LCD_clearScreen();
    2b7e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>

	/* Send password to MC2 */
	SEND_TO_MC2(g_pass1);
    2b82:	8a e1       	ldi	r24, 0x1A	; 26
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	0e 94 46 11 	call	0x228c	; 0x228c <SEND_TO_MC2>

	/* Send ready message to MC2 */
	UART_sendByte(MC1_READY);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>

	/* Wait untill recieve a message from MC2 */
	if(UART_recieveByte() == CORRECT)
    2b90:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    2b94:	85 30       	cpi	r24, 0x05	; 5
    2b96:	19 f4       	brne	.+6      	; 0x2b9e <OPEN_DOOR+0x332>
	{
		/* GO to Display DOOR INFO function which display door situation */
        DISPLAY_DOOR_INFO();
    2b98:	0e 94 1d 12 	call	0x243a	; 0x243a <DISPLAY_DOOR_INFO>
    2b9c:	8a c0       	rjmp	.+276    	; 0x2cb2 <OPEN_DOOR+0x446>
	}
	else
	{
		/* display Wrong pass on LCD */
		LCD_displayString("WRONG PASS");
    2b9e:	8c ed       	ldi	r24, 0xDC	; 220
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
		g_error++;
    2ba6:	80 91 27 01 	lds	r24, 0x0127
    2baa:	8f 5f       	subi	r24, 0xFF	; 255
    2bac:	80 93 27 01 	sts	0x0127, r24

		/* If user enter the password 3 times wrong it display wrong pass on LCD and then return to main menu function */
		if( g_error == 3)
    2bb0:	80 91 27 01 	lds	r24, 0x0127
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	39 f4       	brne	.+14     	; 0x2bc6 <OPEN_DOOR+0x35a>
		{
			UART_sendByte(MC1_READY);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
			WRONG_PASS();
    2bbe:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <WRONG_PASS>
			MAIN_MENU();
    2bc2:	0e 94 a8 12 	call	0x2550	; 0x2550 <MAIN_MENU>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	aa ef       	ldi	r26, 0xFA	; 250
    2bcc:	b3 e4       	ldi	r27, 0x43	; 67
    2bce:	8b 87       	std	Y+11, r24	; 0x0b
    2bd0:	9c 87       	std	Y+12, r25	; 0x0c
    2bd2:	ad 87       	std	Y+13, r26	; 0x0d
    2bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8f 83       	std	Y+7, r24	; 0x07
    2bf0:	98 87       	std	Y+8, r25	; 0x08
    2bf2:	a9 87       	std	Y+9, r26	; 0x09
    2bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <OPEN_DOOR+0x3ac>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <OPEN_DOOR+0x42a>
	else if (__tmp > 65535)
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <OPEN_DOOR+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <OPEN_DOOR+0x40c>
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <OPEN_DOOR+0x3fa>
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <OPEN_DOOR+0x3ee>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <OPEN_DOOR+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <OPEN_DOOR+0x436>
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(500);
		LCD_clearScreen();
    2caa:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
		OPEN_DOOR();
    2cae:	0e 94 36 14 	call	0x286c	; 0x286c <OPEN_DOOR>
	}
}
    2cb2:	ea 96       	adiw	r28, 0x3a	; 58
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <CHANGE_PASS>:

void CHANGE_PASS()
{
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	c6 55       	subi	r28, 0x56	; 86
    2cd2:	d0 40       	sbci	r29, 0x00	; 0
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2cde:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	uint8 num = 0;
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ea 5a       	subi	r30, 0xAA	; 170
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	10 82       	st	Z, r1
	LCD_displayString("Enter Password");
    2cea:	86 e6       	ldi	r24, 0x66	; 102
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
	LCD_moveCursor(1,0);
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_moveCursor>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ef 5a       	subi	r30, 0xAF	; 175
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a8 e4       	ldi	r26, 0x48	; 72
    2d06:	b3 e4       	ldi	r27, 0x43	; 67
    2d08:	80 83       	st	Z, r24
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	a2 83       	std	Z+2, r26	; 0x02
    2d0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	8e 01       	movw	r16, r28
    2d12:	03 5b       	subi	r16, 0xB3	; 179
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	ef 5a       	subi	r30, 0xAF	; 175
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	f8 01       	movw	r30, r16
    2d36:	80 83       	st	Z, r24
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	a2 83       	std	Z+2, r26	; 0x02
    2d3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e3 5b       	subi	r30, 0xB3	; 179
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	44 f4       	brge	.+16     	; 0x2d6c <CHANGE_PASS+0xa8>
		__ticks = 1;
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e5 5b       	subi	r30, 0xB5	; 181
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	64 c0       	rjmp	.+200    	; 0x2e34 <CHANGE_PASS+0x170>
	else if (__tmp > 65535)
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e3 5b       	subi	r30, 0xB3	; 179
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <CHANGE_PASS+0xc8>
    2d8a:	43 c0       	rjmp	.+134    	; 0x2e12 <CHANGE_PASS+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ef 5a       	subi	r30, 0xAF	; 175
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8e 01       	movw	r16, r28
    2dac:	05 5b       	subi	r16, 0xB5	; 181
    2dae:	1f 4f       	sbci	r17, 0xFF	; 255
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	1f c0       	rjmp	.+62     	; 0x2e02 <CHANGE_PASS+0x13e>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5b       	subi	r30, 0xB7	; 183
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e7 5b       	subi	r30, 0xB7	; 183
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <CHANGE_PASS+0x118>
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 5b       	subi	r30, 0xB7	; 183
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dea:	de 01       	movw	r26, r28
    2dec:	a5 5b       	subi	r26, 0xB5	; 181
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	fe 01       	movw	r30, r28
    2df2:	e5 5b       	subi	r30, 0xB5	; 181
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	11 96       	adiw	r26, 0x01	; 1
    2dfe:	9c 93       	st	X, r25
    2e00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	fe 01       	movw	r30, r28
    2e04:	e5 5b       	subi	r30, 0xB5	; 181
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	d1 f6       	brne	.-76     	; 0x2dc4 <CHANGE_PASS+0x100>
    2e10:	28 c0       	rjmp	.+80     	; 0x2e62 <CHANGE_PASS+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	8e 01       	movw	r16, r28
    2e14:	05 5b       	subi	r16, 0xB5	; 181
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e3 5b       	subi	r30, 0xB3	; 179
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	f8 01       	movw	r30, r16
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
    2e34:	de 01       	movw	r26, r28
    2e36:	a9 5b       	subi	r26, 0xB9	; 185
    2e38:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e5 5b       	subi	r30, 0xB5	; 181
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	11 96       	adiw	r26, 0x01	; 1
    2e46:	9c 93       	st	X, r25
    2e48:	8e 93       	st	-X, r24
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e9 5b       	subi	r30, 0xB9	; 185
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <CHANGE_PASS+0x190>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e9 5b       	subi	r30, 0xB9	; 185
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
	_delay_ms(200);

	/* Enter password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    2e62:	fe 01       	movw	r30, r28
    2e64:	eb 5a       	subi	r30, 0xAB	; 171
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	10 82       	st	Z, r1
    2e6a:	17 c1       	rjmp	.+558    	; 0x309a <CHANGE_PASS+0x3d6>
		{
			num = KEYPAD_getPressedKey();
    2e6c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2e70:	fe 01       	movw	r30, r28
    2e72:	ea 5a       	subi	r30, 0xAA	; 170
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 83       	st	Z, r24
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ed 5b       	subi	r30, 0xBD	; 189
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a8 e4       	ldi	r26, 0x48	; 72
    2e84:	b3 e4       	ldi	r27, 0x43	; 67
    2e86:	80 83       	st	Z, r24
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	a2 83       	std	Z+2, r26	; 0x02
    2e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8e:	8e 01       	movw	r16, r28
    2e90:	01 5c       	subi	r16, 0xC1	; 193
    2e92:	1f 4f       	sbci	r17, 0xFF	; 255
    2e94:	fe 01       	movw	r30, r28
    2e96:	ed 5b       	subi	r30, 0xBD	; 189
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a ef       	ldi	r20, 0xFA	; 250
    2ea8:	54 e4       	ldi	r21, 0x44	; 68
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	80 83       	st	Z, r24
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	a2 83       	std	Z+2, r26	; 0x02
    2eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ff 96       	adiw	r30, 0x3f	; 63
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <CHANGE_PASS+0x21e>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9e af       	std	Y+62, r25	; 0x3e
    2ede:	8d af       	std	Y+61, r24	; 0x3d
    2ee0:	46 c0       	rjmp	.+140    	; 0x2f6e <CHANGE_PASS+0x2aa>
	else if (__tmp > 65535)
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ff 96       	adiw	r30, 0x3f	; 63
    2ee6:	60 81       	ld	r22, Z
    2ee8:	71 81       	ldd	r23, Z+1	; 0x01
    2eea:	82 81       	ldd	r24, Z+2	; 0x02
    2eec:	93 81       	ldd	r25, Z+3	; 0x03
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	64 f5       	brge	.+88     	; 0x2f56 <CHANGE_PASS+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	fe 01       	movw	r30, r28
    2f00:	ed 5b       	subi	r30, 0xBD	; 189
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e2       	ldi	r20, 0x20	; 32
    2f12:	51 e4       	ldi	r21, 0x41	; 65
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9e af       	std	Y+62, r25	; 0x3e
    2f2a:	8d af       	std	Y+61, r24	; 0x3d
    2f2c:	0f c0       	rjmp	.+30     	; 0x2f4c <CHANGE_PASS+0x288>
    2f2e:	88 ec       	ldi	r24, 0xC8	; 200
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9c af       	std	Y+60, r25	; 0x3c
    2f34:	8b af       	std	Y+59, r24	; 0x3b
    2f36:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f38:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <CHANGE_PASS+0x276>
    2f3e:	9c af       	std	Y+60, r25	; 0x3c
    2f40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	9e af       	std	Y+62, r25	; 0x3e
    2f4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	69 f7       	brne	.-38     	; 0x2f2e <CHANGE_PASS+0x26a>
    2f54:	16 c0       	rjmp	.+44     	; 0x2f82 <CHANGE_PASS+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	fe 01       	movw	r30, r28
    2f58:	ff 96       	adiw	r30, 0x3f	; 63
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e af       	std	Y+62, r25	; 0x3e
    2f6c:	8d af       	std	Y+61, r24	; 0x3d
    2f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f72:	9a af       	std	Y+58, r25	; 0x3a
    2f74:	89 af       	std	Y+57, r24	; 0x39
    2f76:	89 ad       	ldd	r24, Y+57	; 0x39
    2f78:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <CHANGE_PASS+0x2b6>
    2f7e:	9a af       	std	Y+58, r25	; 0x3a
    2f80:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			g_pass1[i]=num;
    2f82:	fe 01       	movw	r30, r28
    2f84:	eb 5a       	subi	r30, 0xAB	; 171
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	dc 01       	movw	r26, r24
    2f90:	a6 5e       	subi	r26, 0xE6	; 230
    2f92:	be 4f       	sbci	r27, 0xFE	; 254
    2f94:	fe 01       	movw	r30, r28
    2f96:	ea 5a       	subi	r30, 0xAA	; 170
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
    2f9e:	8a e2       	ldi	r24, 0x2A	; 42
    2fa0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_displayCharacter>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a8 e4       	ldi	r26, 0x48	; 72
    2faa:	b3 e4       	ldi	r27, 0x43	; 67
    2fac:	8d ab       	std	Y+53, r24	; 0x35
    2fae:	9e ab       	std	Y+54, r25	; 0x36
    2fb0:	af ab       	std	Y+55, r26	; 0x37
    2fb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fba:	98 ad       	ldd	r25, Y+56	; 0x38
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a ef       	ldi	r20, 0xFA	; 250
    2fc2:	54 e4       	ldi	r21, 0x44	; 68
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	89 ab       	std	Y+49, r24	; 0x31
    2fce:	9a ab       	std	Y+50, r25	; 0x32
    2fd0:	ab ab       	std	Y+51, r26	; 0x33
    2fd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fda:	9c a9       	ldd	r25, Y+52	; 0x34
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <CHANGE_PASS+0x332>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	98 ab       	std	Y+48, r25	; 0x30
    2ff2:	8f a7       	std	Y+47, r24	; 0x2f
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <CHANGE_PASS+0x3b0>
	else if (__tmp > 65535)
    2ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    2ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    2ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <CHANGE_PASS+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	6d a9       	ldd	r22, Y+53	; 0x35
    3010:	7e a9       	ldd	r23, Y+54	; 0x36
    3012:	8f a9       	ldd	r24, Y+55	; 0x37
    3014:	98 ad       	ldd	r25, Y+56	; 0x38
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	98 ab       	std	Y+48, r25	; 0x30
    3034:	8f a7       	std	Y+47, r24	; 0x2f
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <CHANGE_PASS+0x392>
    3038:	88 ec       	ldi	r24, 0xC8	; 200
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9e a7       	std	Y+46, r25	; 0x2e
    303e:	8d a7       	std	Y+45, r24	; 0x2d
    3040:	8d a5       	ldd	r24, Y+45	; 0x2d
    3042:	9e a5       	ldd	r25, Y+46	; 0x2e
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <CHANGE_PASS+0x380>
    3048:	9e a7       	std	Y+46, r25	; 0x2e
    304a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	8f a5       	ldd	r24, Y+47	; 0x2f
    304e:	98 a9       	ldd	r25, Y+48	; 0x30
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	98 ab       	std	Y+48, r25	; 0x30
    3054:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	8f a5       	ldd	r24, Y+47	; 0x2f
    3058:	98 a9       	ldd	r25, Y+48	; 0x30
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <CHANGE_PASS+0x374>
    305e:	14 c0       	rjmp	.+40     	; 0x3088 <CHANGE_PASS+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	69 a9       	ldd	r22, Y+49	; 0x31
    3062:	7a a9       	ldd	r23, Y+50	; 0x32
    3064:	8b a9       	ldd	r24, Y+51	; 0x33
    3066:	9c a9       	ldd	r25, Y+52	; 0x34
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	98 ab       	std	Y+48, r25	; 0x30
    3072:	8f a7       	std	Y+47, r24	; 0x2f
    3074:	8f a5       	ldd	r24, Y+47	; 0x2f
    3076:	98 a9       	ldd	r25, Y+48	; 0x30
    3078:	9c a7       	std	Y+44, r25	; 0x2c
    307a:	8b a7       	std	Y+43, r24	; 0x2b
    307c:	8b a5       	ldd	r24, Y+43	; 0x2b
    307e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <CHANGE_PASS+0x3bc>
    3084:	9c a7       	std	Y+44, r25	; 0x2c
    3086:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_displayString("Enter Password");
	LCD_moveCursor(1,0);
	_delay_ms(200);

	/* Enter password and save it inside an array */
	for(uint8 i =0; i < 5; i++)
    3088:	de 01       	movw	r26, r28
    308a:	ab 5a       	subi	r26, 0xAB	; 171
    308c:	bf 4f       	sbci	r27, 0xFF	; 255
    308e:	fe 01       	movw	r30, r28
    3090:	eb 5a       	subi	r30, 0xAB	; 171
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	8c 93       	st	X, r24
    309a:	fe 01       	movw	r30, r28
    309c:	eb 5a       	subi	r30, 0xAB	; 171
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	85 30       	cpi	r24, 0x05	; 5
    30a4:	08 f4       	brcc	.+2      	; 0x30a8 <CHANGE_PASS+0x3e4>
    30a6:	e2 ce       	rjmp	.-572    	; 0x2e6c <CHANGE_PASS+0x1a8>
			LCD_displayCharacter('*');
			_delay_ms(200);
		}

	/* Send change password message to MC2 */
	UART_sendByte(CHANGE_PASSWORD);
    30a8:	86 e6       	ldi	r24, 0x66	; 102
    30aa:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>

	/* Wait untill recieve ready message from MC2 */
	while(UART_recieveByte() != MC2_READY);
    30ae:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    30b2:	80 31       	cpi	r24, 0x10	; 16
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <CHANGE_PASS+0x3ea>
	LCD_clearScreen();
    30b6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>

	/* Send password to MC2 */
	SEND_TO_MC2(g_pass1);
    30ba:	8a e1       	ldi	r24, 0x1A	; 26
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	0e 94 46 11 	call	0x228c	; 0x228c <SEND_TO_MC2>

	/* Send ready message to MC2 */
	UART_sendByte(MC1_READY);
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>

	/* Wait untill recieve a message from MC2 */
	if(UART_recieveByte() == CORRECT)
    30c8:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    30cc:	85 30       	cpi	r24, 0x05	; 5
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <CHANGE_PASS+0x40e>
    30d0:	f7 c0       	rjmp	.+494    	; 0x32c0 <CHANGE_PASS+0x5fc>
		{
		/* If the MC1 recieved a correct message:
		 * 1. Display Correct on the LCD
		 * 2. Tell the user to enter a new password
		 */
		   LCD_clearScreen();
    30d2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	       LCD_displayString("CORRECT");
    30d6:	87 ee       	ldi	r24, 0xE7	; 231
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	aa ef       	ldi	r26, 0xFA	; 250
    30e4:	b3 e4       	ldi	r27, 0x43	; 67
    30e6:	8f a3       	std	Y+39, r24	; 0x27
    30e8:	98 a7       	std	Y+40, r25	; 0x28
    30ea:	a9 a7       	std	Y+41, r26	; 0x29
    30ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ee:	6f a1       	ldd	r22, Y+39	; 0x27
    30f0:	78 a5       	ldd	r23, Y+40	; 0x28
    30f2:	89 a5       	ldd	r24, Y+41	; 0x29
    30f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a ef       	ldi	r20, 0xFA	; 250
    30fc:	54 e4       	ldi	r21, 0x44	; 68
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	8b a3       	std	Y+35, r24	; 0x23
    3108:	9c a3       	std	Y+36, r25	; 0x24
    310a:	ad a3       	std	Y+37, r26	; 0x25
    310c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    310e:	6b a1       	ldd	r22, Y+35	; 0x23
    3110:	7c a1       	ldd	r23, Y+36	; 0x24
    3112:	8d a1       	ldd	r24, Y+37	; 0x25
    3114:	9e a1       	ldd	r25, Y+38	; 0x26
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	5f e3       	ldi	r21, 0x3F	; 63
    311e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3122:	88 23       	and	r24, r24
    3124:	2c f4       	brge	.+10     	; 0x3130 <CHANGE_PASS+0x46c>
		__ticks = 1;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9a a3       	std	Y+34, r25	; 0x22
    312c:	89 a3       	std	Y+33, r24	; 0x21
    312e:	3f c0       	rjmp	.+126    	; 0x31ae <CHANGE_PASS+0x4ea>
	else if (__tmp > 65535)
    3130:	6b a1       	ldd	r22, Y+35	; 0x23
    3132:	7c a1       	ldd	r23, Y+36	; 0x24
    3134:	8d a1       	ldd	r24, Y+37	; 0x25
    3136:	9e a1       	ldd	r25, Y+38	; 0x26
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	3f ef       	ldi	r19, 0xFF	; 255
    313c:	4f e7       	ldi	r20, 0x7F	; 127
    313e:	57 e4       	ldi	r21, 0x47	; 71
    3140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3144:	18 16       	cp	r1, r24
    3146:	4c f5       	brge	.+82     	; 0x319a <CHANGE_PASS+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3148:	6f a1       	ldd	r22, Y+39	; 0x27
    314a:	78 a5       	ldd	r23, Y+40	; 0x28
    314c:	89 a5       	ldd	r24, Y+41	; 0x29
    314e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e2       	ldi	r20, 0x20	; 32
    3156:	51 e4       	ldi	r21, 0x41	; 65
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9a a3       	std	Y+34, r25	; 0x22
    316e:	89 a3       	std	Y+33, r24	; 0x21
    3170:	0f c0       	rjmp	.+30     	; 0x3190 <CHANGE_PASS+0x4cc>
    3172:	88 ec       	ldi	r24, 0xC8	; 200
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	98 a3       	std	Y+32, r25	; 0x20
    3178:	8f 8f       	std	Y+31, r24	; 0x1f
    317a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    317c:	98 a1       	ldd	r25, Y+32	; 0x20
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <CHANGE_PASS+0x4ba>
    3182:	98 a3       	std	Y+32, r25	; 0x20
    3184:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3186:	89 a1       	ldd	r24, Y+33	; 0x21
    3188:	9a a1       	ldd	r25, Y+34	; 0x22
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	9a a3       	std	Y+34, r25	; 0x22
    318e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3190:	89 a1       	ldd	r24, Y+33	; 0x21
    3192:	9a a1       	ldd	r25, Y+34	; 0x22
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	69 f7       	brne	.-38     	; 0x3172 <CHANGE_PASS+0x4ae>
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <CHANGE_PASS+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319a:	6b a1       	ldd	r22, Y+35	; 0x23
    319c:	7c a1       	ldd	r23, Y+36	; 0x24
    319e:	8d a1       	ldd	r24, Y+37	; 0x25
    31a0:	9e a1       	ldd	r25, Y+38	; 0x26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9a a3       	std	Y+34, r25	; 0x22
    31ac:	89 a3       	std	Y+33, r24	; 0x21
    31ae:	89 a1       	ldd	r24, Y+33	; 0x21
    31b0:	9a a1       	ldd	r25, Y+34	; 0x22
    31b2:	9e 8f       	std	Y+30, r25	; 0x1e
    31b4:	8d 8f       	std	Y+29, r24	; 0x1d
    31b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <CHANGE_PASS+0x4f6>
    31be:	9e 8f       	std	Y+30, r25	; 0x1e
    31c0:	8d 8f       	std	Y+29, r24	; 0x1d
	       _delay_ms(500);
	       LCD_clearScreen();
    31c2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	       LCD_displayString("ENTER NEW PASS");
    31c6:	8f ee       	ldi	r24, 0xEF	; 239
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	aa ef       	ldi	r26, 0xFA	; 250
    31d4:	b3 e4       	ldi	r27, 0x43	; 67
    31d6:	89 8f       	std	Y+25, r24	; 0x19
    31d8:	9a 8f       	std	Y+26, r25	; 0x1a
    31da:	ab 8f       	std	Y+27, r26	; 0x1b
    31dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	69 8d       	ldd	r22, Y+25	; 0x19
    31e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a ef       	ldi	r20, 0xFA	; 250
    31ec:	54 e4       	ldi	r21, 0x44	; 68
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	8d 8b       	std	Y+21, r24	; 0x15
    31f8:	9e 8b       	std	Y+22, r25	; 0x16
    31fa:	af 8b       	std	Y+23, r26	; 0x17
    31fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3200:	7e 89       	ldd	r23, Y+22	; 0x16
    3202:	8f 89       	ldd	r24, Y+23	; 0x17
    3204:	98 8d       	ldd	r25, Y+24	; 0x18
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <CHANGE_PASS+0x55c>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9c 8b       	std	Y+20, r25	; 0x14
    321c:	8b 8b       	std	Y+19, r24	; 0x13
    321e:	3f c0       	rjmp	.+126    	; 0x329e <CHANGE_PASS+0x5da>
	else if (__tmp > 65535)
    3220:	6d 89       	ldd	r22, Y+21	; 0x15
    3222:	7e 89       	ldd	r23, Y+22	; 0x16
    3224:	8f 89       	ldd	r24, Y+23	; 0x17
    3226:	98 8d       	ldd	r25, Y+24	; 0x18
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	3f ef       	ldi	r19, 0xFF	; 255
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	57 e4       	ldi	r21, 0x47	; 71
    3230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	4c f5       	brge	.+82     	; 0x328a <CHANGE_PASS+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	69 8d       	ldd	r22, Y+25	; 0x19
    323a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e2       	ldi	r20, 0x20	; 32
    3246:	51 e4       	ldi	r21, 0x41	; 65
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9c 8b       	std	Y+20, r25	; 0x14
    325e:	8b 8b       	std	Y+19, r24	; 0x13
    3260:	0f c0       	rjmp	.+30     	; 0x3280 <CHANGE_PASS+0x5bc>
    3262:	88 ec       	ldi	r24, 0xC8	; 200
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9a 8b       	std	Y+18, r25	; 0x12
    3268:	89 8b       	std	Y+17, r24	; 0x11
    326a:	89 89       	ldd	r24, Y+17	; 0x11
    326c:	9a 89       	ldd	r25, Y+18	; 0x12
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <CHANGE_PASS+0x5aa>
    3272:	9a 8b       	std	Y+18, r25	; 0x12
    3274:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	9c 8b       	std	Y+20, r25	; 0x14
    327e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	8b 89       	ldd	r24, Y+19	; 0x13
    3282:	9c 89       	ldd	r25, Y+20	; 0x14
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	69 f7       	brne	.-38     	; 0x3262 <CHANGE_PASS+0x59e>
    3288:	14 c0       	rjmp	.+40     	; 0x32b2 <CHANGE_PASS+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328a:	6d 89       	ldd	r22, Y+21	; 0x15
    328c:	7e 89       	ldd	r23, Y+22	; 0x16
    328e:	8f 89       	ldd	r24, Y+23	; 0x17
    3290:	98 8d       	ldd	r25, Y+24	; 0x18
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9c 8b       	std	Y+20, r25	; 0x14
    329c:	8b 8b       	std	Y+19, r24	; 0x13
    329e:	8b 89       	ldd	r24, Y+19	; 0x13
    32a0:	9c 89       	ldd	r25, Y+20	; 0x14
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <CHANGE_PASS+0x5e6>
    32ae:	98 8b       	std	Y+16, r25	; 0x10
    32b0:	8f 87       	std	Y+15, r24	; 0x0f
	        _delay_ms(500);
	        LCD_clearScreen();
    32b2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
	        CREATE_PASSWORD();
    32b6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <CREATE_PASSWORD>
	        CHECK();
    32ba:	0e 94 82 11 	call	0x2304	; 0x2304 <CHECK>
    32be:	8a c0       	rjmp	.+276    	; 0x33d4 <CHANGE_PASS+0x710>
		{
			/* If the MC1 recieved a incorrect message:
			 * 1. Display wrong pass on the LCD
			 * 2. Tell the user to reenter password
			 */
			LCD_displayString("WRONG PASS");
    32c0:	8c ed       	ldi	r24, 0xDC	; 220
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_displayString>
			g_error++;
    32c8:	80 91 27 01 	lds	r24, 0x0127
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	80 93 27 01 	sts	0x0127, r24
			/* If the user enter the password 3 times wrong:
			 * 1. display wrong pass on the LCD for 1 min
			 * 2. return to main menu
			 */
			if( g_error == 3)
    32d2:	80 91 27 01 	lds	r24, 0x0127
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <CHANGE_PASS+0x624>
			{
				UART_sendByte(MC1_READY);
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
				WRONG_PASS();
    32e0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <WRONG_PASS>
				MAIN_MENU();
    32e4:	0e 94 a8 12 	call	0x2550	; 0x2550 <MAIN_MENU>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	aa ef       	ldi	r26, 0xFA	; 250
    32ee:	b3 e4       	ldi	r27, 0x43	; 67
    32f0:	8b 87       	std	Y+11, r24	; 0x0b
    32f2:	9c 87       	std	Y+12, r25	; 0x0c
    32f4:	ad 87       	std	Y+13, r26	; 0x0d
    32f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	4a ef       	ldi	r20, 0xFA	; 250
    3306:	54 e4       	ldi	r21, 0x44	; 68
    3308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	8f 83       	std	Y+7, r24	; 0x07
    3312:	98 87       	std	Y+8, r25	; 0x08
    3314:	a9 87       	std	Y+9, r26	; 0x09
    3316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e8       	ldi	r20, 0x80	; 128
    3326:	5f e3       	ldi	r21, 0x3F	; 63
    3328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332c:	88 23       	and	r24, r24
    332e:	2c f4       	brge	.+10     	; 0x333a <CHANGE_PASS+0x676>
		__ticks = 1;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9e 83       	std	Y+6, r25	; 0x06
    3336:	8d 83       	std	Y+5, r24	; 0x05
    3338:	3f c0       	rjmp	.+126    	; 0x33b8 <CHANGE_PASS+0x6f4>
	else if (__tmp > 65535)
    333a:	6f 81       	ldd	r22, Y+7	; 0x07
    333c:	78 85       	ldd	r23, Y+8	; 0x08
    333e:	89 85       	ldd	r24, Y+9	; 0x09
    3340:	9a 85       	ldd	r25, Y+10	; 0x0a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	3f ef       	ldi	r19, 0xFF	; 255
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	57 e4       	ldi	r21, 0x47	; 71
    334a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	4c f5       	brge	.+82     	; 0x33a4 <CHANGE_PASS+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3352:	6b 85       	ldd	r22, Y+11	; 0x0b
    3354:	7c 85       	ldd	r23, Y+12	; 0x0c
    3356:	8d 85       	ldd	r24, Y+13	; 0x0d
    3358:	9e 85       	ldd	r25, Y+14	; 0x0e
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	51 e4       	ldi	r21, 0x41	; 65
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	bc 01       	movw	r22, r24
    336c:	cd 01       	movw	r24, r26
    336e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	9e 83       	std	Y+6, r25	; 0x06
    3378:	8d 83       	std	Y+5, r24	; 0x05
    337a:	0f c0       	rjmp	.+30     	; 0x339a <CHANGE_PASS+0x6d6>
    337c:	88 ec       	ldi	r24, 0xC8	; 200
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9c 83       	std	Y+4, r25	; 0x04
    3382:	8b 83       	std	Y+3, r24	; 0x03
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <CHANGE_PASS+0x6c4>
    338c:	9c 83       	std	Y+4, r25	; 0x04
    338e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	9e 83       	std	Y+6, r25	; 0x06
    3398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339a:	8d 81       	ldd	r24, Y+5	; 0x05
    339c:	9e 81       	ldd	r25, Y+6	; 0x06
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	69 f7       	brne	.-38     	; 0x337c <CHANGE_PASS+0x6b8>
    33a2:	14 c0       	rjmp	.+40     	; 0x33cc <CHANGE_PASS+0x708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a4:	6f 81       	ldd	r22, Y+7	; 0x07
    33a6:	78 85       	ldd	r23, Y+8	; 0x08
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <CHANGE_PASS+0x700>
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500);
			LCD_clearScreen();
    33cc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_clearScreen>
			CHANGE_PASS();
    33d0:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <CHANGE_PASS>
		}
	}
    33d4:	ca 5a       	subi	r28, 0xAA	; 170
    33d6:	df 4f       	sbci	r29, 0xFF	; 255
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	08 95       	ret

000033ec <main>:

int main()
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	2c 97       	sbiw	r28, 0x0c	; 12
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7); /* Enable GLOBAL INTERRUPT Enable */
    3400:	af e5       	ldi	r26, 0x5F	; 95
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ef e5       	ldi	r30, 0x5F	; 95
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	80 68       	ori	r24, 0x80	; 128
    340c:	8c 93       	st	X, r24
	LCD_init();    /* Intialize LCD driver */
    340e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_init>

	/* Intialize the UART drive through configuration structure */

	UART_configType config={Disabled,N_BITS_8,ONE,9600};
    3412:	ce 01       	movw	r24, r28
    3414:	01 96       	adiw	r24, 0x01	; 1
    3416:	99 87       	std	Y+9, r25	; 0x09
    3418:	88 87       	std	Y+8, r24	; 0x08
    341a:	e2 e1       	ldi	r30, 0x12	; 18
    341c:	f1 e0       	ldi	r31, 0x01	; 1
    341e:	fb 87       	std	Y+11, r31	; 0x0b
    3420:	ea 87       	std	Y+10, r30	; 0x0a
    3422:	f7 e0       	ldi	r31, 0x07	; 7
    3424:	fc 87       	std	Y+12, r31	; 0x0c
    3426:	ea 85       	ldd	r30, Y+10	; 0x0a
    3428:	fb 85       	ldd	r31, Y+11	; 0x0b
    342a:	00 80       	ld	r0, Z
    342c:	8a 85       	ldd	r24, Y+10	; 0x0a
    342e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	9b 87       	std	Y+11, r25	; 0x0b
    3434:	8a 87       	std	Y+10, r24	; 0x0a
    3436:	e8 85       	ldd	r30, Y+8	; 0x08
    3438:	f9 85       	ldd	r31, Y+9	; 0x09
    343a:	00 82       	st	Z, r0
    343c:	88 85       	ldd	r24, Y+8	; 0x08
    343e:	99 85       	ldd	r25, Y+9	; 0x09
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	99 87       	std	Y+9, r25	; 0x09
    3444:	88 87       	std	Y+8, r24	; 0x08
    3446:	9c 85       	ldd	r25, Y+12	; 0x0c
    3448:	91 50       	subi	r25, 0x01	; 1
    344a:	9c 87       	std	Y+12, r25	; 0x0c
    344c:	ec 85       	ldd	r30, Y+12	; 0x0c
    344e:	ee 23       	and	r30, r30
    3450:	51 f7       	brne	.-44     	; 0x3426 <main+0x3a>
	UART_init(&config);
    3452:	ce 01       	movw	r24, r28
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	0e 94 36 1b 	call	0x366c	; 0x366c <UART_init>

	/* Create password Function */
	CREATE_PASSWORD();
    345a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <CREATE_PASSWORD>

	/* Check if two password are the same or not */
	CHECK();
    345e:	0e 94 82 11 	call	0x2304	; 0x2304 <CHECK>
	while(1)
	{
		MAIN_MENU();
    3462:	0e 94 a8 12 	call	0x2550	; 0x2550 <MAIN_MENU>
    3466:	fd cf       	rjmp	.-6      	; 0x3462 <main+0x76>

00003468 <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Interrupt Service Routine for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    3468:	1f 92       	push	r1
    346a:	0f 92       	push	r0
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	0f 92       	push	r0
    3470:	11 24       	eor	r1, r1
    3472:	2f 93       	push	r18
    3474:	3f 93       	push	r19
    3476:	4f 93       	push	r20
    3478:	5f 93       	push	r21
    347a:	6f 93       	push	r22
    347c:	7f 93       	push	r23
    347e:	8f 93       	push	r24
    3480:	9f 93       	push	r25
    3482:	af 93       	push	r26
    3484:	bf 93       	push	r27
    3486:	ef 93       	push	r30
    3488:	ff 93       	push	r31
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3492:	80 91 28 01 	lds	r24, 0x0128
    3496:	90 91 29 01 	lds	r25, 0x0129
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	29 f0       	breq	.+10     	; 0x34a8 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    349e:	e0 91 28 01 	lds	r30, 0x0128
    34a2:	f0 91 29 01 	lds	r31, 0x0129
    34a6:	09 95       	icall
	}
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	ff 91       	pop	r31
    34ae:	ef 91       	pop	r30
    34b0:	bf 91       	pop	r27
    34b2:	af 91       	pop	r26
    34b4:	9f 91       	pop	r25
    34b6:	8f 91       	pop	r24
    34b8:	7f 91       	pop	r23
    34ba:	6f 91       	pop	r22
    34bc:	5f 91       	pop	r21
    34be:	4f 91       	pop	r20
    34c0:	3f 91       	pop	r19
    34c2:	2f 91       	pop	r18
    34c4:	0f 90       	pop	r0
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	0f 90       	pop	r0
    34ca:	1f 90       	pop	r1
    34cc:	18 95       	reti

000034ce <__vector_9>:

/* Interrupt Service Routine for Normal Mode */
ISR(TIMER0_OVF_vect)
{
    34ce:	1f 92       	push	r1
    34d0:	0f 92       	push	r0
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	0f 92       	push	r0
    34d6:	11 24       	eor	r1, r1
    34d8:	2f 93       	push	r18
    34da:	3f 93       	push	r19
    34dc:	4f 93       	push	r20
    34de:	5f 93       	push	r21
    34e0:	6f 93       	push	r22
    34e2:	7f 93       	push	r23
    34e4:	8f 93       	push	r24
    34e6:	9f 93       	push	r25
    34e8:	af 93       	push	r26
    34ea:	bf 93       	push	r27
    34ec:	ef 93       	push	r30
    34ee:	ff 93       	push	r31
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    34f8:	80 91 28 01 	lds	r24, 0x0128
    34fc:	90 91 29 01 	lds	r25, 0x0129
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	29 f0       	breq	.+10     	; 0x350e <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3504:	e0 91 28 01 	lds	r30, 0x0128
    3508:	f0 91 29 01 	lds	r31, 0x0129
    350c:	09 95       	icall
		}
}
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	ff 91       	pop	r31
    3514:	ef 91       	pop	r30
    3516:	bf 91       	pop	r27
    3518:	af 91       	pop	r26
    351a:	9f 91       	pop	r25
    351c:	8f 91       	pop	r24
    351e:	7f 91       	pop	r23
    3520:	6f 91       	pop	r22
    3522:	5f 91       	pop	r21
    3524:	4f 91       	pop	r20
    3526:	3f 91       	pop	r19
    3528:	2f 91       	pop	r18
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	0f 90       	pop	r0
    3530:	1f 90       	pop	r1
    3532:	18 95       	reti

00003534 <TIMER0_init>:
 * 	3. Set the required Clock.
 * 	3. Enable the 	Normal or Compare interrupt.
 * 	4. Initialize Timer0 Registers with the required value.
 */
void TIMER0_init( const TIMER0_configType *ptr)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	00 d0       	rcall	.+0      	; 0x353a <TIMER0_init+0x6>
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	9a 83       	std	Y+2, r25	; 0x02
    3540:	89 83       	std	Y+1, r24	; 0x01
	/* FOC0 = 1 NON-PWM Mode */
	TCCR0 |=(1<<FOC0);
    3542:	a3 e5       	ldi	r26, 0x53	; 83
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e3 e5       	ldi	r30, 0x53	; 83
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	80 68       	ori	r24, 0x80	; 128
    354e:	8c 93       	st	X, r24
	/*
	 * Choose type of timer through bits WGM00 & WGM01
	 * WGM00 & WGM01 = 0 Normal Mode
	 * WGM00 & WGM01 = 1 CTC Mode
	 */
	TCCR0 = ( TCCR0 & 0xBF ) | ( (ptr->timer_type) << 6);
    3550:	a3 e5       	ldi	r26, 0x53	; 83
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e3 e5       	ldi	r30, 0x53	; 83
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	28 2f       	mov	r18, r24
    355c:	2f 7b       	andi	r18, 0xBF	; 191
    355e:	e9 81       	ldd	r30, Y+1	; 0x01
    3560:	fa 81       	ldd	r31, Y+2	; 0x02
    3562:	80 81       	ld	r24, Z
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	00 24       	eor	r0, r0
    356a:	96 95       	lsr	r25
    356c:	87 95       	ror	r24
    356e:	07 94       	ror	r0
    3570:	96 95       	lsr	r25
    3572:	87 95       	ror	r24
    3574:	07 94       	ror	r0
    3576:	98 2f       	mov	r25, r24
    3578:	80 2d       	mov	r24, r0
    357a:	82 2b       	or	r24, r18
    357c:	8c 93       	st	X, r24
	TCCR0 = ( TCCR0 & 0xF7 ) | ( ( (ptr->timer_type) >> 1) <<3 );
    357e:	a3 e5       	ldi	r26, 0x53	; 83
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e3 e5       	ldi	r30, 0x53	; 83
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	28 2f       	mov	r18, r24
    358a:	27 7f       	andi	r18, 0xF7	; 247
    358c:	e9 81       	ldd	r30, Y+1	; 0x01
    358e:	fa 81       	ldd	r31, Y+2	; 0x02
    3590:	80 81       	ld	r24, Z
    3592:	86 95       	lsr	r24
    3594:	88 2f       	mov	r24, r24
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	82 2b       	or	r24, r18
    35a6:	8c 93       	st	X, r24

	/*
	 * Choose Waveform Generation Mode through bits COM01 & COM00
	 */
	TCCR0 = ( TCCR0 & 0xCF ) | ( ( ptr->output_mode ) << 4 );
    35a8:	a3 e5       	ldi	r26, 0x53	; 83
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e3 e5       	ldi	r30, 0x53	; 83
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	28 2f       	mov	r18, r24
    35b4:	2f 7c       	andi	r18, 0xCF	; 207
    35b6:	e9 81       	ldd	r30, Y+1	; 0x01
    35b8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ba:	81 81       	ldd	r24, Z+1	; 0x01
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	82 95       	swap	r24
    35c2:	92 95       	swap	r25
    35c4:	90 7f       	andi	r25, 0xF0	; 240
    35c6:	98 27       	eor	r25, r24
    35c8:	80 7f       	andi	r24, 0xF0	; 240
    35ca:	98 27       	eor	r25, r24
    35cc:	82 2b       	or	r24, r18
    35ce:	8c 93       	st	X, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR0 = ( TCCR0 & 0xF8 ) | ( ptr->clock_select );
    35d0:	a3 e5       	ldi	r26, 0x53	; 83
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	e3 e5       	ldi	r30, 0x53	; 83
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	98 2f       	mov	r25, r24
    35dc:	98 7f       	andi	r25, 0xF8	; 248
    35de:	e9 81       	ldd	r30, Y+1	; 0x01
    35e0:	fa 81       	ldd	r31, Y+2	; 0x02
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	89 2b       	or	r24, r25
    35e6:	8c 93       	st	X, r24

	/*
     * insert the required  value in the timer value registers
	 */
	TCNT0 = ptr->tcnt0_value;
    35e8:	a2 e5       	ldi	r26, 0x52	; 82
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e9 81       	ldd	r30, Y+1	; 0x01
    35ee:	fa 81       	ldd	r31, Y+2	; 0x02
    35f0:	85 81       	ldd	r24, Z+5	; 0x05
    35f2:	8c 93       	st	X, r24
	OCR0 = ptr->ocr0_value;
    35f4:	ac e5       	ldi	r26, 0x5C	; 92
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	e9 81       	ldd	r30, Y+1	; 0x01
    35fa:	fa 81       	ldd	r31, Y+2	; 0x02
    35fc:	84 81       	ldd	r24, Z+4	; 0x04
    35fe:	8c 93       	st	X, r24

	/* Configure which interrupt will be enabled */
	TIMSK = ( TIMSK & 0xFC) | ( ptr->interrupt_enable );
    3600:	a9 e5       	ldi	r26, 0x59	; 89
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e9 e5       	ldi	r30, 0x59	; 89
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	98 2f       	mov	r25, r24
    360c:	9c 7f       	andi	r25, 0xFC	; 252
    360e:	e9 81       	ldd	r30, Y+1	; 0x01
    3610:	fa 81       	ldd	r31, Y+2	; 0x02
    3612:	83 81       	ldd	r24, Z+3	; 0x03
    3614:	89 2b       	or	r24, r25
    3616:	8c 93       	st	X, r24
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <TIMER0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER0_setCallBack(void(*a_ptr)(void))
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <TIMER0_setCallBack+0x6>
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	90 93 29 01 	sts	0x0129, r25
    3638:	80 93 28 01 	sts	0x0128, r24
}
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <TIMER0_DeInit>:

/*
 * Description: Function to disable the Timer0 driver
 */
void TIMER0_DeInit(void)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    364e:	e3 e5       	ldi	r30, 0x53	; 83
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	10 82       	st	Z, r1
	TCNT0 = 0;
    3654:	e2 e5       	ldi	r30, 0x52	; 82
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	10 82       	st	Z, r1
	OCR0 = 0;
    365a:	ec e5       	ldi	r30, 0x5C	; 92
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	10 82       	st	Z, r1
	TIMSK = 0;
    3660:	e9 e5       	ldi	r30, 0x59	; 89
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	10 82       	st	Z, r1
}
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <UART_init>:

/*
 * Description: Function to intialize the UART driver
 */
void UART_init( const UART_configType *ptr)
{
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <UART_init+0x6>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <UART_init+0x8>
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    367c:	1a 82       	std	Y+2, r1	; 0x02
    367e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= (1<<U2X);
    3680:	ab e2       	ldi	r26, 0x2B	; 43
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	eb e2       	ldi	r30, 0x2B	; 43
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	82 60       	ori	r24, 0x02	; 2
    368c:	8c 93       	st	X, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 is configured through UART configuration structure
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    368e:	aa e2       	ldi	r26, 0x2A	; 42
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	ea e2       	ldi	r30, 0x2A	; 42
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	88 61       	ori	r24, 0x18	; 24
    369a:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB ) | ( ( (ptr->bitSize) >>2 ) << 2 );
    369c:	aa e2       	ldi	r26, 0x2A	; 42
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	ea e2       	ldi	r30, 0x2A	; 42
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	28 2f       	mov	r18, r24
    36a8:	2b 7f       	andi	r18, 0xFB	; 251
    36aa:	eb 81       	ldd	r30, Y+3	; 0x03
    36ac:	fc 81       	ldd	r31, Y+4	; 0x04
    36ae:	81 81       	ldd	r24, Z+1	; 0x01
    36b0:	86 95       	lsr	r24
    36b2:	86 95       	lsr	r24
    36b4:	88 2f       	mov	r24, r24
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	82 2b       	or	r24, r18
    36c2:	8c 93       	st	X, r24
		 * UPM1:0  is configured through UART configuration structure
		 * USBS    is configured through UART configuration structure
		 * UCSZ1:0 is configured through UART configuration structure
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    36c4:	a0 e4       	ldi	r26, 0x40	; 64
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e0 e4       	ldi	r30, 0x40	; 64
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	80 68       	ori	r24, 0x80	; 128
    36d0:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xCF ) | ( ( ptr->parityMode ) << 4 );
    36d2:	a0 e4       	ldi	r26, 0x40	; 64
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e0 e4       	ldi	r30, 0x40	; 64
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	28 2f       	mov	r18, r24
    36de:	2f 7c       	andi	r18, 0xCF	; 207
    36e0:	eb 81       	ldd	r30, Y+3	; 0x03
    36e2:	fc 81       	ldd	r31, Y+4	; 0x04
    36e4:	80 81       	ld	r24, Z
    36e6:	88 2f       	mov	r24, r24
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	82 95       	swap	r24
    36ec:	92 95       	swap	r25
    36ee:	90 7f       	andi	r25, 0xF0	; 240
    36f0:	98 27       	eor	r25, r24
    36f2:	80 7f       	andi	r24, 0xF0	; 240
    36f4:	98 27       	eor	r25, r24
    36f6:	82 2b       	or	r24, r18
    36f8:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF7 ) | ( ( ptr->stopBits ) << 3 );
    36fa:	a0 e4       	ldi	r26, 0x40	; 64
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e0 e4       	ldi	r30, 0x40	; 64
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	28 2f       	mov	r18, r24
    3706:	27 7f       	andi	r18, 0xF7	; 247
    3708:	eb 81       	ldd	r30, Y+3	; 0x03
    370a:	fc 81       	ldd	r31, Y+4	; 0x04
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	82 2b       	or	r24, r18
    3720:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF9 ) | ( ( ptr->bitSize ) << 1 );
    3722:	a0 e4       	ldi	r26, 0x40	; 64
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e0 e4       	ldi	r30, 0x40	; 64
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	28 2f       	mov	r18, r24
    372e:	29 7f       	andi	r18, 0xF9	; 249
    3730:	eb 81       	ldd	r30, Y+3	; 0x03
    3732:	fc 81       	ldd	r31, Y+4	; 0x04
    3734:	81 81       	ldd	r24, Z+1	; 0x01
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	82 2b       	or	r24, r18
    3740:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((ptr->baud_rate) * 8UL))) - 1);
    3742:	eb 81       	ldd	r30, Y+3	; 0x03
    3744:	fc 81       	ldd	r31, Y+4	; 0x04
    3746:	83 81       	ldd	r24, Z+3	; 0x03
    3748:	94 81       	ldd	r25, Z+4	; 0x04
    374a:	a5 81       	ldd	r26, Z+5	; 0x05
    374c:	b6 81       	ldd	r27, Z+6	; 0x06
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	aa 1f       	adc	r26, r26
    3754:	bb 1f       	adc	r27, r27
    3756:	88 0f       	add	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	aa 1f       	adc	r26, r26
    375c:	bb 1f       	adc	r27, r27
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	aa 1f       	adc	r26, r26
    3764:	bb 1f       	adc	r27, r27
    3766:	9c 01       	movw	r18, r24
    3768:	ad 01       	movw	r20, r26
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	92 e1       	ldi	r25, 0x12	; 18
    376e:	aa e7       	ldi	r26, 0x7A	; 122
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__udivmodsi4>
    377a:	da 01       	movw	r26, r20
    377c:	c9 01       	movw	r24, r18
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3784:	e0 e4       	ldi	r30, 0x40	; 64
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	89 2f       	mov	r24, r25
    378e:	99 27       	eor	r25, r25
    3790:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3792:	e9 e2       	ldi	r30, 0x29	; 41
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	80 83       	st	Z, r24
}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <UART_sendByte>:

/*
 * Description: Function to send a byte to another UART
 */
void UART_sendByte( uint8 data)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	0f 92       	push	r0
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
	while( BIT_IS_CLEAR(UCSRA,UDRE) );
    37b4:	eb e2       	ldi	r30, 0x2B	; 43
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	88 2f       	mov	r24, r24
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	80 72       	andi	r24, 0x20	; 32
    37c0:	90 70       	andi	r25, 0x00	; 0
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	b9 f3       	breq	.-18     	; 0x37b4 <UART_sendByte+0xc>

	/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
	UDR = data;
    37c6:	ec e2       	ldi	r30, 0x2C	; 44
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	80 83       	st	Z, r24
}
    37ce:	0f 90       	pop	r0
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <UART_recieveByte>:
/*
 * Description: Function to recieve a byte from another UART
 */

uint8 UART_recieveByte( void )
{
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while( BIT_IS_CLEAR(UCSRA,RXC) );
    37de:	eb e2       	ldi	r30, 0x2B	; 43
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	88 23       	and	r24, r24
    37e6:	dc f7       	brge	.-10     	; 0x37de <UART_recieveByte+0x8>

		/*
		 * Read the received data from the Rx buffer (UDR)
		 * The RXC flag will be cleared after read the data
		 */
	    return UDR;
    37e8:	ec e2       	ldi	r30, 0x2C	; 44
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
}
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <UART_sendString>:

/*
 * Description: Function to send a string to another UART
 */
void UART_sendString( const uint8 *str )
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <UART_sendString+0x6>
    37fa:	0f 92       	push	r0
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	9b 83       	std	Y+3, r25	; 0x03
    3802:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3804:	19 82       	std	Y+1, r1	; 0x01

	/* Send the whole string */
	for( i = 0 ; str[i] != '\0'; i++)
    3806:	19 82       	std	Y+1, r1	; 0x01
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <UART_sendString+0x32>
	{
		UART_sendByte(str[i]);
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	28 2f       	mov	r18, r24
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	9b 81       	ldd	r25, Y+3	; 0x03
    3814:	fc 01       	movw	r30, r24
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	80 81       	ld	r24, Z
    381c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART_sendByte>
void UART_sendString( const uint8 *str )
{
	uint8 i = 0;

	/* Send the whole string */
	for( i = 0 ; str[i] != '\0'; i++)
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	8f 5f       	subi	r24, 0xFF	; 255
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	fc 01       	movw	r30, r24
    3832:	e2 0f       	add	r30, r18
    3834:	f3 1f       	adc	r31, r19
    3836:	80 81       	ld	r24, Z
    3838:	88 23       	and	r24, r24
    383a:	39 f7       	brne	.-50     	; 0x380a <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
	}
}
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <UART_recieveString>:
/*
 * Description: Function to recieve a string from another UART
 */

void UART_recieveString( uint8 *str )
{
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	00 d0       	rcall	.+0      	; 0x3852 <UART_recieveString+0xa>
    3852:	0f 92       	push	r0
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	9b 83       	std	Y+3, r25	; 0x03
    385a:	8a 83       	std	Y+2, r24	; 0x02
	    uint8 i = 0;
    385c:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		str[i] = UART_recieveByte();
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	9b 81       	ldd	r25, Y+3	; 0x03
    3868:	8c 01       	movw	r16, r24
    386a:	02 0f       	add	r16, r18
    386c:	13 1f       	adc	r17, r19
    386e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    3872:	f8 01       	movw	r30, r16
    3874:	80 83       	st	Z, r24
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <UART_recieveString+0x4e>

		/* Receive the whole string until the '#' */
		while(str[i] != '#')
		{
			i++;
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	8f 5f       	subi	r24, 0xFF	; 255
    387c:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_recieveByte();
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	8c 01       	movw	r16, r24
    388a:	02 0f       	add	r16, r18
    388c:	13 1f       	adc	r17, r19
    388e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <UART_recieveByte>
    3892:	f8 01       	movw	r30, r16
    3894:	80 83       	st	Z, r24

		/* Receive the first byte */
		str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(str[i] != '#')
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	fc 01       	movw	r30, r24
    38a2:	e2 0f       	add	r30, r18
    38a4:	f3 1f       	adc	r31, r19
    38a6:	80 81       	ld	r24, Z
    38a8:	83 32       	cpi	r24, 0x23	; 35
    38aa:	31 f7       	brne	.-52     	; 0x3878 <UART_recieveString+0x30>
			i++;
			str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		str[i] = '\0';
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	9b 81       	ldd	r25, Y+3	; 0x03
    38b6:	fc 01       	movw	r30, r24
    38b8:	e2 0f       	add	r30, r18
    38ba:	f3 1f       	adc	r31, r19
    38bc:	10 82       	st	Z, r1
}
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <__udivmodsi4>:
    38ce:	a1 e2       	ldi	r26, 0x21	; 33
    38d0:	1a 2e       	mov	r1, r26
    38d2:	aa 1b       	sub	r26, r26
    38d4:	bb 1b       	sub	r27, r27
    38d6:	fd 01       	movw	r30, r26
    38d8:	0d c0       	rjmp	.+26     	; 0x38f4 <__udivmodsi4_ep>

000038da <__udivmodsi4_loop>:
    38da:	aa 1f       	adc	r26, r26
    38dc:	bb 1f       	adc	r27, r27
    38de:	ee 1f       	adc	r30, r30
    38e0:	ff 1f       	adc	r31, r31
    38e2:	a2 17       	cp	r26, r18
    38e4:	b3 07       	cpc	r27, r19
    38e6:	e4 07       	cpc	r30, r20
    38e8:	f5 07       	cpc	r31, r21
    38ea:	20 f0       	brcs	.+8      	; 0x38f4 <__udivmodsi4_ep>
    38ec:	a2 1b       	sub	r26, r18
    38ee:	b3 0b       	sbc	r27, r19
    38f0:	e4 0b       	sbc	r30, r20
    38f2:	f5 0b       	sbc	r31, r21

000038f4 <__udivmodsi4_ep>:
    38f4:	66 1f       	adc	r22, r22
    38f6:	77 1f       	adc	r23, r23
    38f8:	88 1f       	adc	r24, r24
    38fa:	99 1f       	adc	r25, r25
    38fc:	1a 94       	dec	r1
    38fe:	69 f7       	brne	.-38     	; 0x38da <__udivmodsi4_loop>
    3900:	60 95       	com	r22
    3902:	70 95       	com	r23
    3904:	80 95       	com	r24
    3906:	90 95       	com	r25
    3908:	9b 01       	movw	r18, r22
    390a:	ac 01       	movw	r20, r24
    390c:	bd 01       	movw	r22, r26
    390e:	cf 01       	movw	r24, r30
    3910:	08 95       	ret

00003912 <__prologue_saves__>:
    3912:	2f 92       	push	r2
    3914:	3f 92       	push	r3
    3916:	4f 92       	push	r4
    3918:	5f 92       	push	r5
    391a:	6f 92       	push	r6
    391c:	7f 92       	push	r7
    391e:	8f 92       	push	r8
    3920:	9f 92       	push	r9
    3922:	af 92       	push	r10
    3924:	bf 92       	push	r11
    3926:	cf 92       	push	r12
    3928:	df 92       	push	r13
    392a:	ef 92       	push	r14
    392c:	ff 92       	push	r15
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	ca 1b       	sub	r28, r26
    393c:	db 0b       	sbc	r29, r27
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	09 94       	ijmp

0000394a <__epilogue_restores__>:
    394a:	2a 88       	ldd	r2, Y+18	; 0x12
    394c:	39 88       	ldd	r3, Y+17	; 0x11
    394e:	48 88       	ldd	r4, Y+16	; 0x10
    3950:	5f 84       	ldd	r5, Y+15	; 0x0f
    3952:	6e 84       	ldd	r6, Y+14	; 0x0e
    3954:	7d 84       	ldd	r7, Y+13	; 0x0d
    3956:	8c 84       	ldd	r8, Y+12	; 0x0c
    3958:	9b 84       	ldd	r9, Y+11	; 0x0b
    395a:	aa 84       	ldd	r10, Y+10	; 0x0a
    395c:	b9 84       	ldd	r11, Y+9	; 0x09
    395e:	c8 84       	ldd	r12, Y+8	; 0x08
    3960:	df 80       	ldd	r13, Y+7	; 0x07
    3962:	ee 80       	ldd	r14, Y+6	; 0x06
    3964:	fd 80       	ldd	r15, Y+5	; 0x05
    3966:	0c 81       	ldd	r16, Y+4	; 0x04
    3968:	1b 81       	ldd	r17, Y+3	; 0x03
    396a:	aa 81       	ldd	r26, Y+2	; 0x02
    396c:	b9 81       	ldd	r27, Y+1	; 0x01
    396e:	ce 0f       	add	r28, r30
    3970:	d1 1d       	adc	r29, r1
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	ed 01       	movw	r28, r26
    397e:	08 95       	ret

00003980 <itoa>:
    3980:	fb 01       	movw	r30, r22
    3982:	9f 01       	movw	r18, r30
    3984:	e8 94       	clt
    3986:	42 30       	cpi	r20, 0x02	; 2
    3988:	c4 f0       	brlt	.+48     	; 0x39ba <itoa+0x3a>
    398a:	45 32       	cpi	r20, 0x25	; 37
    398c:	b4 f4       	brge	.+44     	; 0x39ba <itoa+0x3a>
    398e:	4a 30       	cpi	r20, 0x0A	; 10
    3990:	29 f4       	brne	.+10     	; 0x399c <itoa+0x1c>
    3992:	97 fb       	bst	r25, 7
    3994:	1e f4       	brtc	.+6      	; 0x399c <itoa+0x1c>
    3996:	90 95       	com	r25
    3998:	81 95       	neg	r24
    399a:	9f 4f       	sbci	r25, 0xFF	; 255
    399c:	64 2f       	mov	r22, r20
    399e:	77 27       	eor	r23, r23
    39a0:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__udivmodhi4>
    39a4:	80 5d       	subi	r24, 0xD0	; 208
    39a6:	8a 33       	cpi	r24, 0x3A	; 58
    39a8:	0c f0       	brlt	.+2      	; 0x39ac <itoa+0x2c>
    39aa:	89 5d       	subi	r24, 0xD9	; 217
    39ac:	81 93       	st	Z+, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	a1 f7       	brne	.-24     	; 0x399c <itoa+0x1c>
    39b4:	16 f4       	brtc	.+4      	; 0x39ba <itoa+0x3a>
    39b6:	5d e2       	ldi	r21, 0x2D	; 45
    39b8:	51 93       	st	Z+, r21
    39ba:	10 82       	st	Z, r1
    39bc:	c9 01       	movw	r24, r18
    39be:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <strrev>

000039c2 <strrev>:
    39c2:	dc 01       	movw	r26, r24
    39c4:	fc 01       	movw	r30, r24
    39c6:	67 2f       	mov	r22, r23
    39c8:	71 91       	ld	r23, Z+
    39ca:	77 23       	and	r23, r23
    39cc:	e1 f7       	brne	.-8      	; 0x39c6 <strrev+0x4>
    39ce:	32 97       	sbiw	r30, 0x02	; 2
    39d0:	04 c0       	rjmp	.+8      	; 0x39da <strrev+0x18>
    39d2:	7c 91       	ld	r23, X
    39d4:	6d 93       	st	X+, r22
    39d6:	70 83       	st	Z, r23
    39d8:	62 91       	ld	r22, -Z
    39da:	ae 17       	cp	r26, r30
    39dc:	bf 07       	cpc	r27, r31
    39de:	c8 f3       	brcs	.-14     	; 0x39d2 <strrev+0x10>
    39e0:	08 95       	ret

000039e2 <__udivmodhi4>:
    39e2:	aa 1b       	sub	r26, r26
    39e4:	bb 1b       	sub	r27, r27
    39e6:	51 e1       	ldi	r21, 0x11	; 17
    39e8:	07 c0       	rjmp	.+14     	; 0x39f8 <__udivmodhi4_ep>

000039ea <__udivmodhi4_loop>:
    39ea:	aa 1f       	adc	r26, r26
    39ec:	bb 1f       	adc	r27, r27
    39ee:	a6 17       	cp	r26, r22
    39f0:	b7 07       	cpc	r27, r23
    39f2:	10 f0       	brcs	.+4      	; 0x39f8 <__udivmodhi4_ep>
    39f4:	a6 1b       	sub	r26, r22
    39f6:	b7 0b       	sbc	r27, r23

000039f8 <__udivmodhi4_ep>:
    39f8:	88 1f       	adc	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	5a 95       	dec	r21
    39fe:	a9 f7       	brne	.-22     	; 0x39ea <__udivmodhi4_loop>
    3a00:	80 95       	com	r24
    3a02:	90 95       	com	r25
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	08 95       	ret

00003a0a <_exit>:
    3a0a:	f8 94       	cli

00003a0c <__stop_program>:
    3a0c:	ff cf       	rjmp	.-2      	; 0x3a0c <__stop_program>
